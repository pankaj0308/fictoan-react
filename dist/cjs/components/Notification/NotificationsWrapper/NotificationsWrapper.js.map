{"version":3,"file":"NotificationsWrapper.js","sources":["../../../../../src/components/Notification/NotificationsWrapper/NotificationsWrapper.tsx"],"sourcesContent":["import React from \"react\";\n\nimport { Element } from \"../../Element/Element\";\nimport { CommonAndHTMLProps } from \"../../Element/constants\";\n\nimport { NotificationsWrapperStyled } from \"./NotificationsWrapper.styled\";\n\n// prettier-ignore\nexport interface NotificationsWrapperCustomProps {\n    position ? : \"left\" | \"right\";\n    anchor   ? : \"top\" | \"bottom\";\n    order    ? : \"new-on-top\" | \"new-on-bottom\";\n}\n\nexport type NotificationsWrapperElementType = HTMLDivElement;\nexport type NotificationsWrapperProps = CommonAndHTMLProps<NotificationsWrapperElementType> &\n    NotificationsWrapperCustomProps;\n\nexport const NotificationsWrapper = React.forwardRef(\n    (\n        { position = \"right\", anchor = \"top\", order = \"new-on-top\", ...props }: NotificationsWrapperProps,\n        ref: React.Ref<NotificationsWrapperElementType>\n    ) => {\n        let classNames = [];\n\n        if (position) {\n            classNames.push(position);\n        }\n\n        if (anchor) {\n            classNames.push(anchor);\n        }\n\n        if (order) {\n            classNames.push(order);\n        }\n\n        return (\n            <Element<NotificationsWrapperElementType>\n                as={NotificationsWrapperStyled}\n                ref={ref}\n                classNames={classNames}\n                {...props}\n            />\n        );\n    }\n);\n"],"names":["NotificationsWrapper","React","forwardRef","_a","ref","position","anchor","order","props","classNames","push","Element","as","NotificationsWrapperStyled"],"mappings":"gXAkBaA,EAAuBC,UAAMC,YACtC,CACIC,EACAC,SADAC,SAAEA,EAAW,QAAbC,OAAsBA,EAAS,MAA/BC,MAAsCA,EAAQ,gBAAiBC,aAA/D,mCAGIC,EAAa,UAEbJ,GACAI,EAAWC,KAAKL,GAGhBC,GACAG,EAAWC,KAAKJ,GAGhBC,GACAE,EAAWC,KAAKH,GAIhBN,wBAACU,yBACGC,GAAIC,6BACJT,IAAKA,EACLK,WAAYA,GACRD"}