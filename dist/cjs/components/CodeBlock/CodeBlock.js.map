{"version":3,"file":"CodeBlock.js","sources":["../../../../node_modules/prism-react-renderer/prism/index.js","../../../../node_modules/prism-react-renderer/dist/index.js","../../../../src/components/CodeBlock/prismjs-components/prism-java.js","../../../../src/components/CodeBlock/CodeBlock.tsx","../../../../src/components/CodeBlock/prismjs-components/prism-csharp.js","../../../../src/components/CodeBlock/prismjs-components/prism-scala.js","../../../../src/components/CodeBlock/prismjs-components/prism-ruby.js","../../../../src/components/CodeBlock/prismjs-components/prism-http.js"],"sourcesContent":["/**\n * Prism: Lightweight, robust, elegant syntax highlighting\n * MIT license http://www.opensource.org/licenses/mit-license.php/\n * @author Lea Verou http://lea.verou.me\n */\n\n/**\n * prism-react-renderer:\n * This file has been modified to remove:\n * - globals and window dependency\n * - worker support\n * - highlightAll and other element dependent methods\n * - _.hooks helpers\n * - UMD/node-specific hacks\n * It has also been run through prettier\n */\nvar Prism = function () {\n  var uniqueId = 0;\n  var _ = {\n    util: {\n      encode: function (tokens) {\n        if (tokens instanceof Token) {\n          return new Token(tokens.type, _.util.encode(tokens.content), tokens.alias);\n        } else if (_.util.type(tokens) === \"Array\") {\n          return tokens.map(_.util.encode);\n        } else {\n          return tokens.replace(/&/g, \"&amp;\").replace(/</g, \"&lt;\").replace(/\\u00a0/g, \" \");\n        }\n      },\n      type: function (o) {\n        return Object.prototype.toString.call(o).match(/\\[object (\\w+)\\]/)[1];\n      },\n      objId: function (obj) {\n        if (!obj[\"__id\"]) {\n          Object.defineProperty(obj, \"__id\", {\n            value: ++uniqueId\n          });\n        }\n\n        return obj[\"__id\"];\n      },\n      // Deep clone a language definition (e.g. to extend it)\n      clone: function (o, visited) {\n        var type = _.util.type(o);\n\n        visited = visited || {};\n\n        switch (type) {\n          case \"Object\":\n            if (visited[_.util.objId(o)]) {\n              return visited[_.util.objId(o)];\n            }\n\n            var clone = {};\n            visited[_.util.objId(o)] = clone;\n\n            for (var key in o) {\n              if (o.hasOwnProperty(key)) {\n                clone[key] = _.util.clone(o[key], visited);\n              }\n            }\n\n            return clone;\n\n          case \"Array\":\n            if (visited[_.util.objId(o)]) {\n              return visited[_.util.objId(o)];\n            }\n\n            var clone = [];\n            visited[_.util.objId(o)] = clone;\n            o.forEach(function (v, i) {\n              clone[i] = _.util.clone(v, visited);\n            });\n            return clone;\n        }\n\n        return o;\n      }\n    },\n    languages: {\n      extend: function (id, redef) {\n        var lang = _.util.clone(_.languages[id]);\n\n        for (var key in redef) {\n          lang[key] = redef[key];\n        }\n\n        return lang;\n      },\n\n      /**\n       * Insert a token before another token in a language literal\n       * As this needs to recreate the object (we cannot actually insert before keys in object literals),\n       * we cannot just provide an object, we need anobject and a key.\n       * @param inside The key (or language id) of the parent\n       * @param before The key to insert before. If not provided, the function appends instead.\n       * @param insert Object with the key/value pairs to insert\n       * @param root The object that contains `inside`. If equal to Prism.languages, it can be omitted.\n       */\n      insertBefore: function (inside, before, insert, root) {\n        root = root || _.languages;\n        var grammar = root[inside];\n\n        if (arguments.length == 2) {\n          insert = arguments[1];\n\n          for (var newToken in insert) {\n            if (insert.hasOwnProperty(newToken)) {\n              grammar[newToken] = insert[newToken];\n            }\n          }\n\n          return grammar;\n        }\n\n        var ret = {};\n\n        for (var token in grammar) {\n          if (grammar.hasOwnProperty(token)) {\n            if (token == before) {\n              for (var newToken in insert) {\n                if (insert.hasOwnProperty(newToken)) {\n                  ret[newToken] = insert[newToken];\n                }\n              }\n            }\n\n            ret[token] = grammar[token];\n          }\n        } // Update references in other language definitions\n\n\n        _.languages.DFS(_.languages, function (key, value) {\n          if (value === root[inside] && key != inside) {\n            this[key] = ret;\n          }\n        });\n\n        return root[inside] = ret;\n      },\n      // Traverse a language definition with Depth First Search\n      DFS: function (o, callback, type, visited) {\n        visited = visited || {};\n\n        for (var i in o) {\n          if (o.hasOwnProperty(i)) {\n            callback.call(o, i, o[i], type || i);\n\n            if (_.util.type(o[i]) === \"Object\" && !visited[_.util.objId(o[i])]) {\n              visited[_.util.objId(o[i])] = true;\n\n              _.languages.DFS(o[i], callback, null, visited);\n            } else if (_.util.type(o[i]) === \"Array\" && !visited[_.util.objId(o[i])]) {\n              visited[_.util.objId(o[i])] = true;\n\n              _.languages.DFS(o[i], callback, i, visited);\n            }\n          }\n        }\n      }\n    },\n    plugins: {},\n    highlight: function (text, grammar, language) {\n      var env = {\n        code: text,\n        grammar: grammar,\n        language: language\n      };\n\n      _.hooks.run(\"before-tokenize\", env);\n\n      env.tokens = _.tokenize(env.code, env.grammar);\n\n      _.hooks.run(\"after-tokenize\", env);\n\n      return Token.stringify(_.util.encode(env.tokens), env.language);\n    },\n    matchGrammar: function (text, strarr, grammar, index, startPos, oneshot, target) {\n      var Token = _.Token;\n\n      for (var token in grammar) {\n        if (!grammar.hasOwnProperty(token) || !grammar[token]) {\n          continue;\n        }\n\n        if (token == target) {\n          return;\n        }\n\n        var patterns = grammar[token];\n        patterns = _.util.type(patterns) === \"Array\" ? patterns : [patterns];\n\n        for (var j = 0; j < patterns.length; ++j) {\n          var pattern = patterns[j],\n              inside = pattern.inside,\n              lookbehind = !!pattern.lookbehind,\n              greedy = !!pattern.greedy,\n              lookbehindLength = 0,\n              alias = pattern.alias;\n\n          if (greedy && !pattern.pattern.global) {\n            // Without the global flag, lastIndex won't work\n            var flags = pattern.pattern.toString().match(/[imuy]*$/)[0];\n            pattern.pattern = RegExp(pattern.pattern.source, flags + \"g\");\n          }\n\n          pattern = pattern.pattern || pattern; // Don’t cache length as it changes during the loop\n\n          for (var i = index, pos = startPos; i < strarr.length; pos += strarr[i].length, ++i) {\n            var str = strarr[i];\n\n            if (strarr.length > text.length) {\n              // Something went terribly wrong, ABORT, ABORT!\n              return;\n            }\n\n            if (str instanceof Token) {\n              continue;\n            }\n\n            if (greedy && i != strarr.length - 1) {\n              pattern.lastIndex = pos;\n              var match = pattern.exec(text);\n\n              if (!match) {\n                break;\n              }\n\n              var from = match.index + (lookbehind ? match[1].length : 0),\n                  to = match.index + match[0].length,\n                  k = i,\n                  p = pos;\n\n              for (var len = strarr.length; k < len && (p < to || !strarr[k].type && !strarr[k - 1].greedy); ++k) {\n                p += strarr[k].length; // Move the index i to the element in strarr that is closest to from\n\n                if (from >= p) {\n                  ++i;\n                  pos = p;\n                }\n              } // If strarr[i] is a Token, then the match starts inside another Token, which is invalid\n\n\n              if (strarr[i] instanceof Token) {\n                continue;\n              } // Number of tokens to delete and replace with the new match\n\n\n              delNum = k - i;\n              str = text.slice(pos, p);\n              match.index -= pos;\n            } else {\n              pattern.lastIndex = 0;\n              var match = pattern.exec(str),\n                  delNum = 1;\n            }\n\n            if (!match) {\n              if (oneshot) {\n                break;\n              }\n\n              continue;\n            }\n\n            if (lookbehind) {\n              lookbehindLength = match[1] ? match[1].length : 0;\n            }\n\n            var from = match.index + lookbehindLength,\n                match = match[0].slice(lookbehindLength),\n                to = from + match.length,\n                before = str.slice(0, from),\n                after = str.slice(to);\n            var args = [i, delNum];\n\n            if (before) {\n              ++i;\n              pos += before.length;\n              args.push(before);\n            }\n\n            var wrapped = new Token(token, inside ? _.tokenize(match, inside) : match, alias, match, greedy);\n            args.push(wrapped);\n\n            if (after) {\n              args.push(after);\n            }\n\n            Array.prototype.splice.apply(strarr, args);\n\n            if (delNum != 1) {\n              _.matchGrammar(text, strarr, grammar, i, pos, true, token);\n            }\n\n            if (oneshot) {\n              break;\n            }\n          }\n        }\n      }\n    },\n    hooks: {\n      add: function () {},\n      run: function (name, env) {}\n    },\n    tokenize: function (text, grammar, language) {\n      var strarr = [text];\n      var rest = grammar.rest;\n\n      if (rest) {\n        for (var token in rest) {\n          grammar[token] = rest[token];\n        }\n\n        delete grammar.rest;\n      }\n\n      _.matchGrammar(text, strarr, grammar, 0, 0, false);\n\n      return strarr;\n    }\n  };\n\n  var Token = _.Token = function (type, content, alias, matchedStr, greedy) {\n    this.type = type;\n    this.content = content;\n    this.alias = alias; // Copy of the full string this token was created from\n\n    this.length = (matchedStr || \"\").length | 0;\n    this.greedy = !!greedy;\n  };\n\n  Token.stringify = function (o, language, parent) {\n    if (typeof o == \"string\") {\n      return o;\n    }\n\n    if (_.util.type(o) === \"Array\") {\n      return o.map(function (element) {\n        return Token.stringify(element, language, o);\n      }).join(\"\");\n    }\n\n    var env = {\n      type: o.type,\n      content: Token.stringify(o.content, language, parent),\n      tag: \"span\",\n      classes: [\"token\", o.type],\n      attributes: {},\n      language: language,\n      parent: parent\n    };\n\n    if (o.alias) {\n      var aliases = _.util.type(o.alias) === \"Array\" ? o.alias : [o.alias];\n      Array.prototype.push.apply(env.classes, aliases);\n    }\n\n    var attributes = Object.keys(env.attributes).map(function (name) {\n      return name + '=\"' + (env.attributes[name] || \"\").replace(/\"/g, \"&quot;\") + '\"';\n    }).join(\" \");\n    return \"<\" + env.tag + ' class=\"' + env.classes.join(\" \") + '\"' + (attributes ? \" \" + attributes : \"\") + \">\" + env.content + \"</\" + env.tag + \">\";\n  };\n\n  return _;\n}();\n\n/* This content is auto-generated to include some prismjs language components: */\n\n/* \"prismjs/components/prism-markup\" */\n\nPrism.languages.markup = {\n  'comment': /<!--[\\s\\S]*?-->/,\n  'prolog': /<\\?[\\s\\S]+?\\?>/,\n  'doctype': {\n    // https://www.w3.org/TR/xml/#NT-doctypedecl\n    pattern: /<!DOCTYPE(?:[^>\"'[\\]]|\"[^\"]*\"|'[^']*')+(?:\\[(?:[^<\"'\\]]|\"[^\"]*\"|'[^']*'|<(?!!--)|<!--(?:[^-]|-(?!->))*-->)*\\]\\s*)?>/i,\n    greedy: true,\n    inside: {\n      'internal-subset': {\n        pattern: /(\\[)[\\s\\S]+(?=\\]>$)/,\n        lookbehind: true,\n        greedy: true,\n        inside: null // see below\n\n      },\n      'string': {\n        pattern: /\"[^\"]*\"|'[^']*'/,\n        greedy: true\n      },\n      'punctuation': /^<!|>$|[[\\]]/,\n      'doctype-tag': /^DOCTYPE/,\n      'name': /[^\\s<>'\"]+/\n    }\n  },\n  'cdata': /<!\\[CDATA\\[[\\s\\S]*?]]>/i,\n  'tag': {\n    pattern: /<\\/?(?!\\d)[^\\s>\\/=$<%]+(?:\\s(?:\\s*[^\\s>\\/=]+(?:\\s*=\\s*(?:\"[^\"]*\"|'[^']*'|[^\\s'\">=]+(?=[\\s>]))|(?=[\\s/>])))+)?\\s*\\/?>/,\n    greedy: true,\n    inside: {\n      'tag': {\n        pattern: /^<\\/?[^\\s>\\/]+/,\n        inside: {\n          'punctuation': /^<\\/?/,\n          'namespace': /^[^\\s>\\/:]+:/\n        }\n      },\n      'attr-value': {\n        pattern: /=\\s*(?:\"[^\"]*\"|'[^']*'|[^\\s'\">=]+)/,\n        inside: {\n          'punctuation': [{\n            pattern: /^=/,\n            alias: 'attr-equals'\n          }, /\"|'/]\n        }\n      },\n      'punctuation': /\\/?>/,\n      'attr-name': {\n        pattern: /[^\\s>\\/]+/,\n        inside: {\n          'namespace': /^[^\\s>\\/:]+:/\n        }\n      }\n    }\n  },\n  'entity': [{\n    pattern: /&[\\da-z]{1,8};/i,\n    alias: 'named-entity'\n  }, /&#x?[\\da-f]{1,8};/i]\n};\nPrism.languages.markup['tag'].inside['attr-value'].inside['entity'] = Prism.languages.markup['entity'];\nPrism.languages.markup['doctype'].inside['internal-subset'].inside = Prism.languages.markup; // Plugin to make entity title show the real entity, idea by Roman Komarov\n\nPrism.hooks.add('wrap', function (env) {\n  if (env.type === 'entity') {\n    env.attributes['title'] = env.content.replace(/&amp;/, '&');\n  }\n});\nObject.defineProperty(Prism.languages.markup.tag, 'addInlined', {\n  /**\n   * Adds an inlined language to markup.\n   *\n   * An example of an inlined language is CSS with `<style>` tags.\n   *\n   * @param {string} tagName The name of the tag that contains the inlined language. This name will be treated as\n   * case insensitive.\n   * @param {string} lang The language key.\n   * @example\n   * addInlined('style', 'css');\n   */\n  value: function addInlined(tagName, lang) {\n    var includedCdataInside = {};\n    includedCdataInside['language-' + lang] = {\n      pattern: /(^<!\\[CDATA\\[)[\\s\\S]+?(?=\\]\\]>$)/i,\n      lookbehind: true,\n      inside: Prism.languages[lang]\n    };\n    includedCdataInside['cdata'] = /^<!\\[CDATA\\[|\\]\\]>$/i;\n    var inside = {\n      'included-cdata': {\n        pattern: /<!\\[CDATA\\[[\\s\\S]*?\\]\\]>/i,\n        inside: includedCdataInside\n      }\n    };\n    inside['language-' + lang] = {\n      pattern: /[\\s\\S]+/,\n      inside: Prism.languages[lang]\n    };\n    var def = {};\n    def[tagName] = {\n      pattern: RegExp(/(<__[^>]*>)(?:<!\\[CDATA\\[(?:[^\\]]|\\](?!\\]>))*\\]\\]>|(?!<!\\[CDATA\\[)[\\s\\S])*?(?=<\\/__>)/.source.replace(/__/g, function () {\n        return tagName;\n      }), 'i'),\n      lookbehind: true,\n      greedy: true,\n      inside: inside\n    };\n    Prism.languages.insertBefore('markup', 'cdata', def);\n  }\n});\nPrism.languages.html = Prism.languages.markup;\nPrism.languages.mathml = Prism.languages.markup;\nPrism.languages.svg = Prism.languages.markup;\nPrism.languages.xml = Prism.languages.extend('markup', {});\nPrism.languages.ssml = Prism.languages.xml;\nPrism.languages.atom = Prism.languages.xml;\nPrism.languages.rss = Prism.languages.xml;\n/* \"prismjs/components/prism-bash\" */\n\n(function (Prism) {\n  // $ set | grep '^[A-Z][^[:space:]]*=' | cut -d= -f1 | tr '\\n' '|'\n  // + LC_ALL, RANDOM, REPLY, SECONDS.\n  // + make sure PS1..4 are here as they are not always set,\n  // - some useless things.\n  var envVars = '\\\\b(?:BASH|BASHOPTS|BASH_ALIASES|BASH_ARGC|BASH_ARGV|BASH_CMDS|BASH_COMPLETION_COMPAT_DIR|BASH_LINENO|BASH_REMATCH|BASH_SOURCE|BASH_VERSINFO|BASH_VERSION|COLORTERM|COLUMNS|COMP_WORDBREAKS|DBUS_SESSION_BUS_ADDRESS|DEFAULTS_PATH|DESKTOP_SESSION|DIRSTACK|DISPLAY|EUID|GDMSESSION|GDM_LANG|GNOME_KEYRING_CONTROL|GNOME_KEYRING_PID|GPG_AGENT_INFO|GROUPS|HISTCONTROL|HISTFILE|HISTFILESIZE|HISTSIZE|HOME|HOSTNAME|HOSTTYPE|IFS|INSTANCE|JOB|LANG|LANGUAGE|LC_ADDRESS|LC_ALL|LC_IDENTIFICATION|LC_MEASUREMENT|LC_MONETARY|LC_NAME|LC_NUMERIC|LC_PAPER|LC_TELEPHONE|LC_TIME|LESSCLOSE|LESSOPEN|LINES|LOGNAME|LS_COLORS|MACHTYPE|MAILCHECK|MANDATORY_PATH|NO_AT_BRIDGE|OLDPWD|OPTERR|OPTIND|ORBIT_SOCKETDIR|OSTYPE|PAPERSIZE|PATH|PIPESTATUS|PPID|PS1|PS2|PS3|PS4|PWD|RANDOM|REPLY|SECONDS|SELINUX_INIT|SESSION|SESSIONTYPE|SESSION_MANAGER|SHELL|SHELLOPTS|SHLVL|SSH_AUTH_SOCK|TERM|UID|UPSTART_EVENTS|UPSTART_INSTANCE|UPSTART_JOB|UPSTART_SESSION|USER|WINDOWID|XAUTHORITY|XDG_CONFIG_DIRS|XDG_CURRENT_DESKTOP|XDG_DATA_DIRS|XDG_GREETER_DATA_DIR|XDG_MENU_PREFIX|XDG_RUNTIME_DIR|XDG_SEAT|XDG_SEAT_PATH|XDG_SESSION_DESKTOP|XDG_SESSION_ID|XDG_SESSION_PATH|XDG_SESSION_TYPE|XDG_VTNR|XMODIFIERS)\\\\b';\n  var commandAfterHeredoc = {\n    pattern: /(^([\"']?)\\w+\\2)[ \\t]+\\S.*/,\n    lookbehind: true,\n    alias: 'punctuation',\n    // this looks reasonably well in all themes\n    inside: null // see below\n\n  };\n  var insideString = {\n    'bash': commandAfterHeredoc,\n    'environment': {\n      pattern: RegExp(\"\\\\$\" + envVars),\n      alias: 'constant'\n    },\n    'variable': [// [0]: Arithmetic Environment\n    {\n      pattern: /\\$?\\(\\([\\s\\S]+?\\)\\)/,\n      greedy: true,\n      inside: {\n        // If there is a $ sign at the beginning highlight $(( and )) as variable\n        'variable': [{\n          pattern: /(^\\$\\(\\([\\s\\S]+)\\)\\)/,\n          lookbehind: true\n        }, /^\\$\\(\\(/],\n        'number': /\\b0x[\\dA-Fa-f]+\\b|(?:\\b\\d+(?:\\.\\d*)?|\\B\\.\\d+)(?:[Ee]-?\\d+)?/,\n        // Operators according to https://www.gnu.org/software/bash/manual/bashref.html#Shell-Arithmetic\n        'operator': /--?|-=|\\+\\+?|\\+=|!=?|~|\\*\\*?|\\*=|\\/=?|%=?|<<=?|>>=?|<=?|>=?|==?|&&?|&=|\\^=?|\\|\\|?|\\|=|\\?|:/,\n        // If there is no $ sign at the beginning highlight (( and )) as punctuation\n        'punctuation': /\\(\\(?|\\)\\)?|,|;/\n      }\n    }, // [1]: Command Substitution\n    {\n      pattern: /\\$\\((?:\\([^)]+\\)|[^()])+\\)|`[^`]+`/,\n      greedy: true,\n      inside: {\n        'variable': /^\\$\\(|^`|\\)$|`$/\n      }\n    }, // [2]: Brace expansion\n    {\n      pattern: /\\$\\{[^}]+\\}/,\n      greedy: true,\n      inside: {\n        'operator': /:[-=?+]?|[!\\/]|##?|%%?|\\^\\^?|,,?/,\n        'punctuation': /[\\[\\]]/,\n        'environment': {\n          pattern: RegExp(\"(\\\\{)\" + envVars),\n          lookbehind: true,\n          alias: 'constant'\n        }\n      }\n    }, /\\$(?:\\w+|[#?*!@$])/],\n    // Escape sequences from echo and printf's manuals, and escaped quotes.\n    'entity': /\\\\(?:[abceEfnrtv\\\\\"]|O?[0-7]{1,3}|x[0-9a-fA-F]{1,2}|u[0-9a-fA-F]{4}|U[0-9a-fA-F]{8})/\n  };\n  Prism.languages.bash = {\n    'shebang': {\n      pattern: /^#!\\s*\\/.*/,\n      alias: 'important'\n    },\n    'comment': {\n      pattern: /(^|[^\"{\\\\$])#.*/,\n      lookbehind: true\n    },\n    'function-name': [// a) function foo {\n    // b) foo() {\n    // c) function foo() {\n    // but not “foo {”\n    {\n      // a) and c)\n      pattern: /(\\bfunction\\s+)\\w+(?=(?:\\s*\\(?:\\s*\\))?\\s*\\{)/,\n      lookbehind: true,\n      alias: 'function'\n    }, {\n      // b)\n      pattern: /\\b\\w+(?=\\s*\\(\\s*\\)\\s*\\{)/,\n      alias: 'function'\n    }],\n    // Highlight variable names as variables in for and select beginnings.\n    'for-or-select': {\n      pattern: /(\\b(?:for|select)\\s+)\\w+(?=\\s+in\\s)/,\n      alias: 'variable',\n      lookbehind: true\n    },\n    // Highlight variable names as variables in the left-hand part\n    // of assignments (“=” and “+=”).\n    'assign-left': {\n      pattern: /(^|[\\s;|&]|[<>]\\()\\w+(?=\\+?=)/,\n      inside: {\n        'environment': {\n          pattern: RegExp(\"(^|[\\\\s;|&]|[<>]\\\\()\" + envVars),\n          lookbehind: true,\n          alias: 'constant'\n        }\n      },\n      alias: 'variable',\n      lookbehind: true\n    },\n    'string': [// Support for Here-documents https://en.wikipedia.org/wiki/Here_document\n    {\n      pattern: /((?:^|[^<])<<-?\\s*)(\\w+?)\\s[\\s\\S]*?(?:\\r?\\n|\\r)\\2/,\n      lookbehind: true,\n      greedy: true,\n      inside: insideString\n    }, // Here-document with quotes around the tag\n    // → No expansion (so no “inside”).\n    {\n      pattern: /((?:^|[^<])<<-?\\s*)([\"'])(\\w+)\\2\\s[\\s\\S]*?(?:\\r?\\n|\\r)\\3/,\n      lookbehind: true,\n      greedy: true,\n      inside: {\n        'bash': commandAfterHeredoc\n      }\n    }, // “Normal” string\n    {\n      pattern: /(^|[^\\\\](?:\\\\\\\\)*)([\"'])(?:\\\\[\\s\\S]|\\$\\([^)]+\\)|\\$(?!\\()|`[^`]+`|(?!\\2)[^\\\\`$])*\\2/,\n      lookbehind: true,\n      greedy: true,\n      inside: insideString\n    }],\n    'environment': {\n      pattern: RegExp(\"\\\\$?\" + envVars),\n      alias: 'constant'\n    },\n    'variable': insideString.variable,\n    'function': {\n      pattern: /(^|[\\s;|&]|[<>]\\()(?:add|apropos|apt|aptitude|apt-cache|apt-get|aspell|automysqlbackup|awk|basename|bash|bc|bconsole|bg|bzip2|cal|cat|cfdisk|chgrp|chkconfig|chmod|chown|chroot|cksum|clear|cmp|column|comm|composer|cp|cron|crontab|csplit|curl|cut|date|dc|dd|ddrescue|debootstrap|df|diff|diff3|dig|dir|dircolors|dirname|dirs|dmesg|du|egrep|eject|env|ethtool|expand|expect|expr|fdformat|fdisk|fg|fgrep|file|find|fmt|fold|format|free|fsck|ftp|fuser|gawk|git|gparted|grep|groupadd|groupdel|groupmod|groups|grub-mkconfig|gzip|halt|head|hg|history|host|hostname|htop|iconv|id|ifconfig|ifdown|ifup|import|install|ip|jobs|join|kill|killall|less|link|ln|locate|logname|logrotate|look|lpc|lpr|lprint|lprintd|lprintq|lprm|ls|lsof|lynx|make|man|mc|mdadm|mkconfig|mkdir|mke2fs|mkfifo|mkfs|mkisofs|mknod|mkswap|mmv|more|most|mount|mtools|mtr|mutt|mv|nano|nc|netstat|nice|nl|nohup|notify-send|npm|nslookup|op|open|parted|passwd|paste|pathchk|ping|pkill|pnpm|popd|pr|printcap|printenv|ps|pushd|pv|quota|quotacheck|quotactl|ram|rar|rcp|reboot|remsync|rename|renice|rev|rm|rmdir|rpm|rsync|scp|screen|sdiff|sed|sendmail|seq|service|sftp|sh|shellcheck|shuf|shutdown|sleep|slocate|sort|split|ssh|stat|strace|su|sudo|sum|suspend|swapon|sync|tac|tail|tar|tee|time|timeout|top|touch|tr|traceroute|tsort|tty|umount|uname|unexpand|uniq|units|unrar|unshar|unzip|update-grub|uptime|useradd|userdel|usermod|users|uudecode|uuencode|v|vdir|vi|vim|virsh|vmstat|wait|watch|wc|wget|whereis|which|who|whoami|write|xargs|xdg-open|yarn|yes|zenity|zip|zsh|zypper)(?=$|[)\\s;|&])/,\n      lookbehind: true\n    },\n    'keyword': {\n      pattern: /(^|[\\s;|&]|[<>]\\()(?:if|then|else|elif|fi|for|while|in|case|esac|function|select|do|done|until)(?=$|[)\\s;|&])/,\n      lookbehind: true\n    },\n    // https://www.gnu.org/software/bash/manual/html_node/Shell-Builtin-Commands.html\n    'builtin': {\n      pattern: /(^|[\\s;|&]|[<>]\\()(?:\\.|:|break|cd|continue|eval|exec|exit|export|getopts|hash|pwd|readonly|return|shift|test|times|trap|umask|unset|alias|bind|builtin|caller|command|declare|echo|enable|help|let|local|logout|mapfile|printf|read|readarray|source|type|typeset|ulimit|unalias|set|shopt)(?=$|[)\\s;|&])/,\n      lookbehind: true,\n      // Alias added to make those easier to distinguish from strings.\n      alias: 'class-name'\n    },\n    'boolean': {\n      pattern: /(^|[\\s;|&]|[<>]\\()(?:true|false)(?=$|[)\\s;|&])/,\n      lookbehind: true\n    },\n    'file-descriptor': {\n      pattern: /\\B&\\d\\b/,\n      alias: 'important'\n    },\n    'operator': {\n      // Lots of redirections here, but not just that.\n      pattern: /\\d?<>|>\\||\\+=|==?|!=?|=~|<<[<-]?|[&\\d]?>>|\\d?[<>]&?|&[>&]?|\\|[&|]?|<=?|>=?/,\n      inside: {\n        'file-descriptor': {\n          pattern: /^\\d/,\n          alias: 'important'\n        }\n      }\n    },\n    'punctuation': /\\$?\\(\\(?|\\)\\)?|\\.\\.|[{}[\\];\\\\]/,\n    'number': {\n      pattern: /(^|\\s)(?:[1-9]\\d*|0)(?:[.,]\\d+)?\\b/,\n      lookbehind: true\n    }\n  };\n  commandAfterHeredoc.inside = Prism.languages.bash;\n  /* Patterns in command substitution. */\n\n  var toBeCopied = ['comment', 'function-name', 'for-or-select', 'assign-left', 'string', 'environment', 'function', 'keyword', 'builtin', 'boolean', 'file-descriptor', 'operator', 'punctuation', 'number'];\n  var inside = insideString.variable[1].inside;\n\n  for (var i = 0; i < toBeCopied.length; i++) {\n    inside[toBeCopied[i]] = Prism.languages.bash[toBeCopied[i]];\n  }\n\n  Prism.languages.shell = Prism.languages.bash;\n})(Prism);\n/* \"prismjs/components/prism-clike\" */\n\n\nPrism.languages.clike = {\n  'comment': [{\n    pattern: /(^|[^\\\\])\\/\\*[\\s\\S]*?(?:\\*\\/|$)/,\n    lookbehind: true,\n    greedy: true\n  }, {\n    pattern: /(^|[^\\\\:])\\/\\/.*/,\n    lookbehind: true,\n    greedy: true\n  }],\n  'string': {\n    pattern: /([\"'])(?:\\\\(?:\\r\\n|[\\s\\S])|(?!\\1)[^\\\\\\r\\n])*\\1/,\n    greedy: true\n  },\n  'class-name': {\n    pattern: /(\\b(?:class|interface|extends|implements|trait|instanceof|new)\\s+|\\bcatch\\s+\\()[\\w.\\\\]+/i,\n    lookbehind: true,\n    inside: {\n      'punctuation': /[.\\\\]/\n    }\n  },\n  'keyword': /\\b(?:if|else|while|do|for|return|in|instanceof|function|new|try|throw|catch|finally|null|break|continue)\\b/,\n  'boolean': /\\b(?:true|false)\\b/,\n  'function': /\\w+(?=\\()/,\n  'number': /\\b0x[\\da-f]+\\b|(?:\\b\\d+(?:\\.\\d*)?|\\B\\.\\d+)(?:e[+-]?\\d+)?/i,\n  'operator': /[<>]=?|[!=]=?=?|--?|\\+\\+?|&&?|\\|\\|?|[?*/~^%]/,\n  'punctuation': /[{}[\\];(),.:]/\n};\n/* \"prismjs/components/prism-c\" */\n\nPrism.languages.c = Prism.languages.extend('clike', {\n  'comment': {\n    pattern: /\\/\\/(?:[^\\r\\n\\\\]|\\\\(?:\\r\\n?|\\n|(?![\\r\\n])))*|\\/\\*[\\s\\S]*?(?:\\*\\/|$)/,\n    greedy: true\n  },\n  'class-name': {\n    pattern: /(\\b(?:enum|struct)\\s+(?:__attribute__\\s*\\(\\([\\s\\S]*?\\)\\)\\s*)?)\\w+|\\b[a-z]\\w*_t\\b/,\n    lookbehind: true\n  },\n  'keyword': /\\b(?:__attribute__|_Alignas|_Alignof|_Atomic|_Bool|_Complex|_Generic|_Imaginary|_Noreturn|_Static_assert|_Thread_local|asm|typeof|inline|auto|break|case|char|const|continue|default|do|double|else|enum|extern|float|for|goto|if|int|long|register|return|short|signed|sizeof|static|struct|switch|typedef|union|unsigned|void|volatile|while)\\b/,\n  'function': /[a-z_]\\w*(?=\\s*\\()/i,\n  'number': /(?:\\b0x(?:[\\da-f]+(?:\\.[\\da-f]*)?|\\.[\\da-f]+)(?:p[+-]?\\d+)?|(?:\\b\\d+(?:\\.\\d*)?|\\B\\.\\d+)(?:e[+-]?\\d+)?)[ful]{0,4}/i,\n  'operator': />>=?|<<=?|->|([-+&|:])\\1|[?:~]|[-+*/%&|^!=<>]=?/\n});\nPrism.languages.insertBefore('c', 'string', {\n  'macro': {\n    // allow for multiline macro definitions\n    // spaces after the # character compile fine with gcc\n    pattern: /(^\\s*)#\\s*[a-z](?:[^\\r\\n\\\\/]|\\/(?!\\*)|\\/\\*(?:[^*]|\\*(?!\\/))*\\*\\/|\\\\(?:\\r\\n|[\\s\\S]))*/im,\n    lookbehind: true,\n    greedy: true,\n    alias: 'property',\n    inside: {\n      'string': [{\n        // highlight the path of the include statement as a string\n        pattern: /^(#\\s*include\\s*)<[^>]+>/,\n        lookbehind: true\n      }, Prism.languages.c['string']],\n      'comment': Prism.languages.c['comment'],\n      'macro-name': [{\n        pattern: /(^#\\s*define\\s+)\\w+\\b(?!\\()/i,\n        lookbehind: true\n      }, {\n        pattern: /(^#\\s*define\\s+)\\w+\\b(?=\\()/i,\n        lookbehind: true,\n        alias: 'function'\n      }],\n      // highlight macro directives as keywords\n      'directive': {\n        pattern: /^(#\\s*)[a-z]+/,\n        lookbehind: true,\n        alias: 'keyword'\n      },\n      'directive-hash': /^#/,\n      'punctuation': /##|\\\\(?=[\\r\\n])/,\n      'expression': {\n        pattern: /\\S[\\s\\S]*/,\n        inside: Prism.languages.c\n      }\n    }\n  },\n  // highlight predefined macros as constants\n  'constant': /\\b(?:__FILE__|__LINE__|__DATE__|__TIME__|__TIMESTAMP__|__func__|EOF|NULL|SEEK_CUR|SEEK_END|SEEK_SET|stdin|stdout|stderr)\\b/\n});\ndelete Prism.languages.c['boolean'];\n/* \"prismjs/components/prism-cpp\" */\n\n(function (Prism) {\n  var keyword = /\\b(?:alignas|alignof|asm|auto|bool|break|case|catch|char|char8_t|char16_t|char32_t|class|compl|concept|const|consteval|constexpr|constinit|const_cast|continue|co_await|co_return|co_yield|decltype|default|delete|do|double|dynamic_cast|else|enum|explicit|export|extern|float|for|friend|goto|if|inline|int|int8_t|int16_t|int32_t|int64_t|uint8_t|uint16_t|uint32_t|uint64_t|long|mutable|namespace|new|noexcept|nullptr|operator|private|protected|public|register|reinterpret_cast|requires|return|short|signed|sizeof|static|static_assert|static_cast|struct|switch|template|this|thread_local|throw|try|typedef|typeid|typename|union|unsigned|using|virtual|void|volatile|wchar_t|while)\\b/;\n  Prism.languages.cpp = Prism.languages.extend('c', {\n    'class-name': [{\n      pattern: RegExp(/(\\b(?:class|concept|enum|struct|typename)\\s+)(?!<keyword>)\\w+/.source.replace(/<keyword>/g, function () {\n        return keyword.source;\n      })),\n      lookbehind: true\n    }, // This is intended to capture the class name of method implementations like:\n    //   void foo::bar() const {}\n    // However! The `foo` in the above example could also be a namespace, so we only capture the class name if\n    // it starts with an uppercase letter. This approximation should give decent results.\n    /\\b[A-Z]\\w*(?=\\s*::\\s*\\w+\\s*\\()/, // This will capture the class name before destructors like:\n    //   Foo::~Foo() {}\n    /\\b[A-Z_]\\w*(?=\\s*::\\s*~\\w+\\s*\\()/i, // This also intends to capture the class name of method implementations but here the class has template\n    // parameters, so it can't be a namespace (until C++ adds generic namespaces).\n    /\\w+(?=\\s*<(?:[^<>]|<(?:[^<>]|<[^<>]*>)*>)*>\\s*::\\s*\\w+\\s*\\()/],\n    'keyword': keyword,\n    'number': {\n      pattern: /(?:\\b0b[01']+|\\b0x(?:[\\da-f']+(?:\\.[\\da-f']*)?|\\.[\\da-f']+)(?:p[+-]?[\\d']+)?|(?:\\b[\\d']+(?:\\.[\\d']*)?|\\B\\.[\\d']+)(?:e[+-]?[\\d']+)?)[ful]{0,4}/i,\n      greedy: true\n    },\n    'operator': />>=?|<<=?|->|([-+&|:])\\1|[?:~]|<=>|[-+*/%&|^!=<>]=?|\\b(?:and|and_eq|bitand|bitor|not|not_eq|or|or_eq|xor|xor_eq)\\b/,\n    'boolean': /\\b(?:true|false)\\b/\n  });\n  Prism.languages.insertBefore('cpp', 'string', {\n    'raw-string': {\n      pattern: /R\"([^()\\\\ ]{0,16})\\([\\s\\S]*?\\)\\1\"/,\n      alias: 'string',\n      greedy: true\n    }\n  });\n  Prism.languages.insertBefore('cpp', 'class-name', {\n    // the base clause is an optional list of parent classes\n    // https://en.cppreference.com/w/cpp/language/class\n    'base-clause': {\n      pattern: /(\\b(?:class|struct)\\s+\\w+\\s*:\\s*)[^;{}\"'\\s]+(?:\\s+[^;{}\"'\\s]+)*(?=\\s*[;{])/,\n      lookbehind: true,\n      greedy: true,\n      inside: Prism.languages.extend('cpp', {})\n    }\n  });\n  Prism.languages.insertBefore('inside', 'operator', {\n    // All untokenized words that are not namespaces should be class names\n    'class-name': /\\b[a-z_]\\w*\\b(?!\\s*::)/i\n  }, Prism.languages.cpp['base-clause']);\n})(Prism);\n/* \"prismjs/components/prism-css\" */\n\n\n(function (Prism) {\n  var string = /(\"|')(?:\\\\(?:\\r\\n|[\\s\\S])|(?!\\1)[^\\\\\\r\\n])*\\1/;\n  Prism.languages.css = {\n    'comment': /\\/\\*[\\s\\S]*?\\*\\//,\n    'atrule': {\n      pattern: /@[\\w-](?:[^;{\\s]|\\s+(?![\\s{]))*(?:;|(?=\\s*\\{))/,\n      inside: {\n        'rule': /^@[\\w-]+/,\n        'selector-function-argument': {\n          pattern: /(\\bselector\\s*\\(\\s*(?![\\s)]))(?:[^()\\s]|\\s+(?![\\s)])|\\((?:[^()]|\\([^()]*\\))*\\))+(?=\\s*\\))/,\n          lookbehind: true,\n          alias: 'selector'\n        },\n        'keyword': {\n          pattern: /(^|[^\\w-])(?:and|not|only|or)(?![\\w-])/,\n          lookbehind: true\n        } // See rest below\n\n      }\n    },\n    'url': {\n      // https://drafts.csswg.org/css-values-3/#urls\n      pattern: RegExp('\\\\burl\\\\((?:' + string.source + '|' + /(?:[^\\\\\\r\\n()\"']|\\\\[\\s\\S])*/.source + ')\\\\)', 'i'),\n      greedy: true,\n      inside: {\n        'function': /^url/i,\n        'punctuation': /^\\(|\\)$/,\n        'string': {\n          pattern: RegExp('^' + string.source + '$'),\n          alias: 'url'\n        }\n      }\n    },\n    'selector': RegExp('[^{}\\\\s](?:[^{};\"\\'\\\\s]|\\\\s+(?![\\\\s{])|' + string.source + ')*(?=\\\\s*\\\\{)'),\n    'string': {\n      pattern: string,\n      greedy: true\n    },\n    'property': /(?!\\s)[-_a-z\\xA0-\\uFFFF](?:(?!\\s)[-\\w\\xA0-\\uFFFF])*(?=\\s*:)/i,\n    'important': /!important\\b/i,\n    'function': /[-a-z0-9]+(?=\\()/i,\n    'punctuation': /[(){};:,]/\n  };\n  Prism.languages.css['atrule'].inside.rest = Prism.languages.css;\n  var markup = Prism.languages.markup;\n\n  if (markup) {\n    markup.tag.addInlined('style', 'css');\n    Prism.languages.insertBefore('inside', 'attr-value', {\n      'style-attr': {\n        pattern: /(^|[\"'\\s])style\\s*=\\s*(?:\"[^\"]*\"|'[^']*')/i,\n        lookbehind: true,\n        inside: {\n          'attr-value': {\n            pattern: /=\\s*(?:\"[^\"]*\"|'[^']*'|[^\\s'\">=]+)/,\n            inside: {\n              'style': {\n                pattern: /([\"'])[\\s\\S]+(?=[\"']$)/,\n                lookbehind: true,\n                alias: 'language-css',\n                inside: Prism.languages.css\n              },\n              'punctuation': [{\n                pattern: /^=/,\n                alias: 'attr-equals'\n              }, /\"|'/]\n            }\n          },\n          'attr-name': /^style/i\n        }\n      }\n    }, markup.tag);\n  }\n})(Prism);\n/* \"prismjs/components/prism-css-extras\" */\n\n\n(function (Prism) {\n  var string = /(\"|')(?:\\\\(?:\\r\\n|[\\s\\S])|(?!\\1)[^\\\\\\r\\n])*\\1/;\n  var selectorInside;\n  Prism.languages.css.selector = {\n    pattern: Prism.languages.css.selector,\n    inside: selectorInside = {\n      'pseudo-element': /:(?:after|before|first-letter|first-line|selection)|::[-\\w]+/,\n      'pseudo-class': /:[-\\w]+/,\n      'class': /\\.[-\\w]+/,\n      'id': /#[-\\w]+/,\n      'attribute': {\n        pattern: RegExp('\\\\[(?:[^[\\\\]\"\\']|' + string.source + ')*\\\\]'),\n        greedy: true,\n        inside: {\n          'punctuation': /^\\[|\\]$/,\n          'case-sensitivity': {\n            pattern: /(\\s)[si]$/i,\n            lookbehind: true,\n            alias: 'keyword'\n          },\n          'namespace': {\n            pattern: /^(\\s*)(?:(?!\\s)[-*\\w\\xA0-\\uFFFF])*\\|(?!=)/,\n            lookbehind: true,\n            inside: {\n              'punctuation': /\\|$/\n            }\n          },\n          'attr-name': {\n            pattern: /^(\\s*)(?:(?!\\s)[-\\w\\xA0-\\uFFFF])+/,\n            lookbehind: true\n          },\n          'attr-value': [string, {\n            pattern: /(=\\s*)(?:(?!\\s)[-\\w\\xA0-\\uFFFF])+(?=\\s*$)/,\n            lookbehind: true\n          }],\n          'operator': /[|~*^$]?=/\n        }\n      },\n      'n-th': [{\n        pattern: /(\\(\\s*)[+-]?\\d*[\\dn](?:\\s*[+-]\\s*\\d+)?(?=\\s*\\))/,\n        lookbehind: true,\n        inside: {\n          'number': /[\\dn]+/,\n          'operator': /[+-]/\n        }\n      }, {\n        pattern: /(\\(\\s*)(?:even|odd)(?=\\s*\\))/i,\n        lookbehind: true\n      }],\n      'combinator': />|\\+|~|\\|\\|/,\n      // the `tag` token has been existed and removed.\n      // because we can't find a perfect tokenize to match it.\n      // if you want to add it, please read https://github.com/PrismJS/prism/pull/2373 first.\n      'punctuation': /[(),]/\n    }\n  };\n  Prism.languages.css['atrule'].inside['selector-function-argument'].inside = selectorInside;\n  Prism.languages.insertBefore('css', 'property', {\n    'variable': {\n      pattern: /(^|[^-\\w\\xA0-\\uFFFF])--(?!\\s)[-_a-z\\xA0-\\uFFFF](?:(?!\\s)[-\\w\\xA0-\\uFFFF])*/i,\n      lookbehind: true\n    }\n  });\n  var unit = {\n    pattern: /(\\b\\d+)(?:%|[a-z]+\\b)/,\n    lookbehind: true\n  }; // 123 -123 .123 -.123 12.3 -12.3\n\n  var number = {\n    pattern: /(^|[^\\w.-])-?(?:\\d+(?:\\.\\d+)?|\\.\\d+)/,\n    lookbehind: true\n  };\n  Prism.languages.insertBefore('css', 'function', {\n    'operator': {\n      pattern: /(\\s)[+\\-*\\/](?=\\s)/,\n      lookbehind: true\n    },\n    // CAREFUL!\n    // Previewers and Inline color use hexcode and color.\n    'hexcode': {\n      pattern: /\\B#(?:[\\da-f]{1,2}){3,4}\\b/i,\n      alias: 'color'\n    },\n    'color': [/\\b(?:AliceBlue|AntiqueWhite|Aqua|Aquamarine|Azure|Beige|Bisque|Black|BlanchedAlmond|Blue|BlueViolet|Brown|BurlyWood|CadetBlue|Chartreuse|Chocolate|Coral|CornflowerBlue|Cornsilk|Crimson|Cyan|DarkBlue|DarkCyan|DarkGoldenRod|DarkGr[ae]y|DarkGreen|DarkKhaki|DarkMagenta|DarkOliveGreen|DarkOrange|DarkOrchid|DarkRed|DarkSalmon|DarkSeaGreen|DarkSlateBlue|DarkSlateGr[ae]y|DarkTurquoise|DarkViolet|DeepPink|DeepSkyBlue|DimGr[ae]y|DodgerBlue|FireBrick|FloralWhite|ForestGreen|Fuchsia|Gainsboro|GhostWhite|Gold|GoldenRod|Gr[ae]y|Green|GreenYellow|HoneyDew|HotPink|IndianRed|Indigo|Ivory|Khaki|Lavender|LavenderBlush|LawnGreen|LemonChiffon|LightBlue|LightCoral|LightCyan|LightGoldenRodYellow|LightGr[ae]y|LightGreen|LightPink|LightSalmon|LightSeaGreen|LightSkyBlue|LightSlateGr[ae]y|LightSteelBlue|LightYellow|Lime|LimeGreen|Linen|Magenta|Maroon|MediumAquaMarine|MediumBlue|MediumOrchid|MediumPurple|MediumSeaGreen|MediumSlateBlue|MediumSpringGreen|MediumTurquoise|MediumVioletRed|MidnightBlue|MintCream|MistyRose|Moccasin|NavajoWhite|Navy|OldLace|Olive|OliveDrab|Orange|OrangeRed|Orchid|PaleGoldenRod|PaleGreen|PaleTurquoise|PaleVioletRed|PapayaWhip|PeachPuff|Peru|Pink|Plum|PowderBlue|Purple|Red|RosyBrown|RoyalBlue|SaddleBrown|Salmon|SandyBrown|SeaGreen|SeaShell|Sienna|Silver|SkyBlue|SlateBlue|SlateGr[ae]y|Snow|SpringGreen|SteelBlue|Tan|Teal|Thistle|Tomato|Transparent|Turquoise|Violet|Wheat|White|WhiteSmoke|Yellow|YellowGreen)\\b/i, {\n      pattern: /\\b(?:rgb|hsl)\\(\\s*\\d{1,3}\\s*,\\s*\\d{1,3}%?\\s*,\\s*\\d{1,3}%?\\s*\\)\\B|\\b(?:rgb|hsl)a\\(\\s*\\d{1,3}\\s*,\\s*\\d{1,3}%?\\s*,\\s*\\d{1,3}%?\\s*,\\s*(?:0|0?\\.\\d+|1)\\s*\\)\\B/i,\n      inside: {\n        'unit': unit,\n        'number': number,\n        'function': /[\\w-]+(?=\\()/,\n        'punctuation': /[(),]/\n      }\n    }],\n    // it's important that there is no boundary assertion after the hex digits\n    'entity': /\\\\[\\da-f]{1,8}/i,\n    'unit': unit,\n    'number': number\n  });\n})(Prism);\n/* \"prismjs/components/prism-javascript\" */\n\n\nPrism.languages.javascript = Prism.languages.extend('clike', {\n  'class-name': [Prism.languages.clike['class-name'], {\n    pattern: /(^|[^$\\w\\xA0-\\uFFFF])(?!\\s)[_$A-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*(?=\\.(?:prototype|constructor))/,\n    lookbehind: true\n  }],\n  'keyword': [{\n    pattern: /((?:^|})\\s*)(?:catch|finally)\\b/,\n    lookbehind: true\n  }, {\n    pattern: /(^|[^.]|\\.\\.\\.\\s*)\\b(?:as|async(?=\\s*(?:function\\b|\\(|[$\\w\\xA0-\\uFFFF]|$))|await|break|case|class|const|continue|debugger|default|delete|do|else|enum|export|extends|for|from|function|(?:get|set)(?=\\s*[\\[$\\w\\xA0-\\uFFFF])|if|implements|import|in|instanceof|interface|let|new|null|of|package|private|protected|public|return|static|super|switch|this|throw|try|typeof|undefined|var|void|while|with|yield)\\b/,\n    lookbehind: true\n  }],\n  // Allow for all non-ASCII characters (See http://stackoverflow.com/a/2008444)\n  'function': /#?(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*(?=\\s*(?:\\.\\s*(?:apply|bind|call)\\s*)?\\()/,\n  'number': /\\b(?:(?:0[xX](?:[\\dA-Fa-f](?:_[\\dA-Fa-f])?)+|0[bB](?:[01](?:_[01])?)+|0[oO](?:[0-7](?:_[0-7])?)+)n?|(?:\\d(?:_\\d)?)+n|NaN|Infinity)\\b|(?:\\b(?:\\d(?:_\\d)?)+\\.?(?:\\d(?:_\\d)?)*|\\B\\.(?:\\d(?:_\\d)?)+)(?:[Ee][+-]?(?:\\d(?:_\\d)?)+)?/,\n  'operator': /--|\\+\\+|\\*\\*=?|=>|&&=?|\\|\\|=?|[!=]==|<<=?|>>>?=?|[-+*/%&|^!=<>]=?|\\.{3}|\\?\\?=?|\\?\\.?|[~:]/\n});\nPrism.languages.javascript['class-name'][0].pattern = /(\\b(?:class|interface|extends|implements|instanceof|new)\\s+)[\\w.\\\\]+/;\nPrism.languages.insertBefore('javascript', 'keyword', {\n  'regex': {\n    pattern: /((?:^|[^$\\w\\xA0-\\uFFFF.\"'\\])\\s]|\\b(?:return|yield))\\s*)\\/(?:\\[(?:[^\\]\\\\\\r\\n]|\\\\.)*]|\\\\.|[^/\\\\\\[\\r\\n])+\\/[gimyus]{0,6}(?=(?:\\s|\\/\\*(?:[^*]|\\*(?!\\/))*\\*\\/)*(?:$|[\\r\\n,.;:})\\]]|\\/\\/))/,\n    lookbehind: true,\n    greedy: true,\n    inside: {\n      'regex-source': {\n        pattern: /^(\\/)[\\s\\S]+(?=\\/[a-z]*$)/,\n        lookbehind: true,\n        alias: 'language-regex',\n        inside: Prism.languages.regex\n      },\n      'regex-flags': /[a-z]+$/,\n      'regex-delimiter': /^\\/|\\/$/\n    }\n  },\n  // This must be declared before keyword because we use \"function\" inside the look-forward\n  'function-variable': {\n    pattern: /#?(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*(?=\\s*[=:]\\s*(?:async\\s*)?(?:\\bfunction\\b|(?:\\((?:[^()]|\\([^()]*\\))*\\)|(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*)\\s*=>))/,\n    alias: 'function'\n  },\n  'parameter': [{\n    pattern: /(function(?:\\s+(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*)?\\s*\\(\\s*)(?!\\s)(?:[^()\\s]|\\s+(?![\\s)])|\\([^()]*\\))+(?=\\s*\\))/,\n    lookbehind: true,\n    inside: Prism.languages.javascript\n  }, {\n    pattern: /(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*(?=\\s*=>)/i,\n    inside: Prism.languages.javascript\n  }, {\n    pattern: /(\\(\\s*)(?!\\s)(?:[^()\\s]|\\s+(?![\\s)])|\\([^()]*\\))+(?=\\s*\\)\\s*=>)/,\n    lookbehind: true,\n    inside: Prism.languages.javascript\n  }, {\n    pattern: /((?:\\b|\\s|^)(?!(?:as|async|await|break|case|catch|class|const|continue|debugger|default|delete|do|else|enum|export|extends|finally|for|from|function|get|if|implements|import|in|instanceof|interface|let|new|null|of|package|private|protected|public|return|set|static|super|switch|this|throw|try|typeof|undefined|var|void|while|with|yield)(?![$\\w\\xA0-\\uFFFF]))(?:(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*\\s*)\\(\\s*|\\]\\s*\\(\\s*)(?!\\s)(?:[^()\\s]|\\s+(?![\\s)])|\\([^()]*\\))+(?=\\s*\\)\\s*\\{)/,\n    lookbehind: true,\n    inside: Prism.languages.javascript\n  }],\n  'constant': /\\b[A-Z](?:[A-Z_]|\\dx?)*\\b/\n});\nPrism.languages.insertBefore('javascript', 'string', {\n  'template-string': {\n    pattern: /`(?:\\\\[\\s\\S]|\\${(?:[^{}]|{(?:[^{}]|{[^}]*})*})+}|(?!\\${)[^\\\\`])*`/,\n    greedy: true,\n    inside: {\n      'template-punctuation': {\n        pattern: /^`|`$/,\n        alias: 'string'\n      },\n      'interpolation': {\n        pattern: /((?:^|[^\\\\])(?:\\\\{2})*)\\${(?:[^{}]|{(?:[^{}]|{[^}]*})*})+}/,\n        lookbehind: true,\n        inside: {\n          'interpolation-punctuation': {\n            pattern: /^\\${|}$/,\n            alias: 'punctuation'\n          },\n          rest: Prism.languages.javascript\n        }\n      },\n      'string': /[\\s\\S]+/\n    }\n  }\n});\n\nif (Prism.languages.markup) {\n  Prism.languages.markup.tag.addInlined('script', 'javascript');\n}\n\nPrism.languages.js = Prism.languages.javascript;\n/* \"prismjs/components/prism-jsx\" */\n\n(function (Prism) {\n  var javascript = Prism.util.clone(Prism.languages.javascript);\n  Prism.languages.jsx = Prism.languages.extend('markup', javascript);\n  Prism.languages.jsx.tag.pattern = /<\\/?(?:[\\w.:-]+(?:\\s+(?:[\\w.:$-]+(?:=(?:\"(?:\\\\[^]|[^\\\\\"])*\"|'(?:\\\\[^]|[^\\\\'])*'|[^\\s{'\">=]+|\\{(?:\\{(?:\\{[^{}]*\\}|[^{}])*\\}|[^{}])+\\}))?|\\{\\s*\\.{3}\\s*[a-z_$][\\w$]*(?:\\.[a-z_$][\\w$]*)*\\s*\\}))*\\s*\\/?)?>/i;\n  Prism.languages.jsx.tag.inside['tag'].pattern = /^<\\/?[^\\s>\\/]*/i;\n  Prism.languages.jsx.tag.inside['attr-value'].pattern = /=(?!\\{)(?:\"(?:\\\\[^]|[^\\\\\"])*\"|'(?:\\\\[^]|[^\\\\'])*'|[^\\s'\">]+)/i;\n  Prism.languages.jsx.tag.inside['tag'].inside['class-name'] = /^[A-Z]\\w*(?:\\.[A-Z]\\w*)*$/;\n  Prism.languages.insertBefore('inside', 'attr-name', {\n    'spread': {\n      pattern: /\\{\\s*\\.{3}\\s*[a-z_$][\\w$]*(?:\\.[a-z_$][\\w$]*)*\\s*\\}/,\n      inside: {\n        'punctuation': /\\.{3}|[{}.]/,\n        'attr-value': /\\w+/\n      }\n    }\n  }, Prism.languages.jsx.tag);\n  Prism.languages.insertBefore('inside', 'attr-value', {\n    'script': {\n      // Allow for two levels of nesting\n      pattern: /=(?:\\{(?:\\{(?:\\{[^{}]*\\}|[^{}])*\\}|[^{}])+\\})/i,\n      inside: {\n        'script-punctuation': {\n          pattern: /^=(?={)/,\n          alias: 'punctuation'\n        },\n        rest: Prism.languages.jsx\n      },\n      'alias': 'language-javascript'\n    }\n  }, Prism.languages.jsx.tag); // The following will handle plain text inside tags\n\n  var stringifyToken = function (token) {\n    if (!token) {\n      return '';\n    }\n\n    if (typeof token === 'string') {\n      return token;\n    }\n\n    if (typeof token.content === 'string') {\n      return token.content;\n    }\n\n    return token.content.map(stringifyToken).join('');\n  };\n\n  var walkTokens = function (tokens) {\n    var openedTags = [];\n\n    for (var i = 0; i < tokens.length; i++) {\n      var token = tokens[i];\n      var notTagNorBrace = false;\n\n      if (typeof token !== 'string') {\n        if (token.type === 'tag' && token.content[0] && token.content[0].type === 'tag') {\n          // We found a tag, now find its kind\n          if (token.content[0].content[0].content === '</') {\n            // Closing tag\n            if (openedTags.length > 0 && openedTags[openedTags.length - 1].tagName === stringifyToken(token.content[0].content[1])) {\n              // Pop matching opening tag\n              openedTags.pop();\n            }\n          } else {\n            if (token.content[token.content.length - 1].content === '/>') ; else {\n              // Opening tag\n              openedTags.push({\n                tagName: stringifyToken(token.content[0].content[1]),\n                openedBraces: 0\n              });\n            }\n          }\n        } else if (openedTags.length > 0 && token.type === 'punctuation' && token.content === '{') {\n          // Here we might have entered a JSX context inside a tag\n          openedTags[openedTags.length - 1].openedBraces++;\n        } else if (openedTags.length > 0 && openedTags[openedTags.length - 1].openedBraces > 0 && token.type === 'punctuation' && token.content === '}') {\n          // Here we might have left a JSX context inside a tag\n          openedTags[openedTags.length - 1].openedBraces--;\n        } else {\n          notTagNorBrace = true;\n        }\n      }\n\n      if (notTagNorBrace || typeof token === 'string') {\n        if (openedTags.length > 0 && openedTags[openedTags.length - 1].openedBraces === 0) {\n          // Here we are inside a tag, and not inside a JSX context.\n          // That's plain text: drop any tokens matched.\n          var plainText = stringifyToken(token); // And merge text with adjacent text\n\n          if (i < tokens.length - 1 && (typeof tokens[i + 1] === 'string' || tokens[i + 1].type === 'plain-text')) {\n            plainText += stringifyToken(tokens[i + 1]);\n            tokens.splice(i + 1, 1);\n          }\n\n          if (i > 0 && (typeof tokens[i - 1] === 'string' || tokens[i - 1].type === 'plain-text')) {\n            plainText = stringifyToken(tokens[i - 1]) + plainText;\n            tokens.splice(i - 1, 1);\n            i--;\n          }\n\n          tokens[i] = new Prism.Token('plain-text', plainText, null, plainText);\n        }\n      }\n\n      if (token.content && typeof token.content !== 'string') {\n        walkTokens(token.content);\n      }\n    }\n  };\n\n  Prism.hooks.add('after-tokenize', function (env) {\n    if (env.language !== 'jsx' && env.language !== 'tsx') {\n      return;\n    }\n\n    walkTokens(env.tokens);\n  });\n})(Prism);\n/* \"prismjs/components/prism-js-extras\" */\n\n\n(function (Prism) {\n  Prism.languages.insertBefore('javascript', 'function-variable', {\n    'method-variable': {\n      pattern: RegExp('(\\\\.\\\\s*)' + Prism.languages.javascript['function-variable'].pattern.source),\n      lookbehind: true,\n      alias: ['function-variable', 'method', 'function', 'property-access']\n    }\n  });\n  Prism.languages.insertBefore('javascript', 'function', {\n    'method': {\n      pattern: RegExp('(\\\\.\\\\s*)' + Prism.languages.javascript['function'].source),\n      lookbehind: true,\n      alias: ['function', 'property-access']\n    }\n  });\n  Prism.languages.insertBefore('javascript', 'constant', {\n    'known-class-name': [{\n      // standard built-ins\n      // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects\n      pattern: /\\b(?:(?:(?:Uint|Int)(?:8|16|32)|Uint8Clamped|Float(?:32|64))?Array|ArrayBuffer|BigInt|Boolean|DataView|Date|Error|Function|Intl|JSON|Math|Number|Object|Promise|Proxy|Reflect|RegExp|String|Symbol|(?:Weak)?(?:Set|Map)|WebAssembly)\\b/,\n      alias: 'class-name'\n    }, {\n      // errors\n      pattern: /\\b(?:[A-Z]\\w*)Error\\b/,\n      alias: 'class-name'\n    }]\n  });\n  /**\n   * Replaces the `<ID>` placeholder in the given pattern with a pattern for general JS identifiers.\n   *\n   * @param {string} source\n   * @param {string} [flags]\n   * @returns {RegExp}\n   */\n\n  function withId(source, flags) {\n    return RegExp(source.replace(/<ID>/g, function () {\n      return /(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*/.source;\n    }), flags);\n  }\n\n  Prism.languages.insertBefore('javascript', 'keyword', {\n    'imports': {\n      // https://tc39.es/ecma262/#sec-imports\n      pattern: withId(/(\\bimport\\b\\s*)(?:<ID>(?:\\s*,\\s*(?:\\*\\s*as\\s+<ID>|\\{[^{}]*\\}))?|\\*\\s*as\\s+<ID>|\\{[^{}]*\\})(?=\\s*\\bfrom\\b)/.source),\n      lookbehind: true,\n      inside: Prism.languages.javascript\n    },\n    'exports': {\n      // https://tc39.es/ecma262/#sec-exports\n      pattern: withId(/(\\bexport\\b\\s*)(?:\\*(?:\\s*as\\s+<ID>)?(?=\\s*\\bfrom\\b)|\\{[^{}]*\\})/.source),\n      lookbehind: true,\n      inside: Prism.languages.javascript\n    }\n  });\n  Prism.languages.javascript['keyword'].unshift({\n    pattern: /\\b(?:as|default|export|from|import)\\b/,\n    alias: 'module'\n  }, {\n    pattern: /\\b(?:await|break|catch|continue|do|else|for|finally|if|return|switch|throw|try|while|yield)\\b/,\n    alias: 'control-flow'\n  }, {\n    pattern: /\\bnull\\b/,\n    alias: ['null', 'nil']\n  }, {\n    pattern: /\\bundefined\\b/,\n    alias: 'nil'\n  });\n  Prism.languages.insertBefore('javascript', 'operator', {\n    'spread': {\n      pattern: /\\.{3}/,\n      alias: 'operator'\n    },\n    'arrow': {\n      pattern: /=>/,\n      alias: 'operator'\n    }\n  });\n  Prism.languages.insertBefore('javascript', 'punctuation', {\n    'property-access': {\n      pattern: withId(/(\\.\\s*)#?<ID>/.source),\n      lookbehind: true\n    },\n    'maybe-class-name': {\n      pattern: /(^|[^$\\w\\xA0-\\uFFFF])[A-Z][$\\w\\xA0-\\uFFFF]+/,\n      lookbehind: true\n    },\n    'dom': {\n      // this contains only a few commonly used DOM variables\n      pattern: /\\b(?:document|location|navigator|performance|(?:local|session)Storage|window)\\b/,\n      alias: 'variable'\n    },\n    'console': {\n      pattern: /\\bconsole(?=\\s*\\.)/,\n      alias: 'class-name'\n    }\n  }); // add 'maybe-class-name' to tokens which might be a class name\n\n  var maybeClassNameTokens = ['function', 'function-variable', 'method', 'method-variable', 'property-access'];\n\n  for (var i = 0; i < maybeClassNameTokens.length; i++) {\n    var token = maybeClassNameTokens[i];\n    var value = Prism.languages.javascript[token]; // convert regex to object\n\n    if (Prism.util.type(value) === 'RegExp') {\n      value = Prism.languages.javascript[token] = {\n        pattern: value\n      };\n    } // keep in mind that we don't support arrays\n\n\n    var inside = value.inside || {};\n    value.inside = inside;\n    inside['maybe-class-name'] = /^[A-Z][\\s\\S]*/;\n  }\n})(Prism);\n/* \"prismjs/components/prism-coffeescript\" */\n\n\n(function (Prism) {\n  // Ignore comments starting with { to privilege string interpolation highlighting\n  var comment = /#(?!\\{).+/,\n      interpolation = {\n    pattern: /#\\{[^}]+\\}/,\n    alias: 'variable'\n  };\n  Prism.languages.coffeescript = Prism.languages.extend('javascript', {\n    'comment': comment,\n    'string': [// Strings are multiline\n    {\n      pattern: /'(?:\\\\[\\s\\S]|[^\\\\'])*'/,\n      greedy: true\n    }, {\n      // Strings are multiline\n      pattern: /\"(?:\\\\[\\s\\S]|[^\\\\\"])*\"/,\n      greedy: true,\n      inside: {\n        'interpolation': interpolation\n      }\n    }],\n    'keyword': /\\b(?:and|break|by|catch|class|continue|debugger|delete|do|each|else|extend|extends|false|finally|for|if|in|instanceof|is|isnt|let|loop|namespace|new|no|not|null|of|off|on|or|own|return|super|switch|then|this|throw|true|try|typeof|undefined|unless|until|when|while|window|with|yes|yield)\\b/,\n    'class-member': {\n      pattern: /@(?!\\d)\\w+/,\n      alias: 'variable'\n    }\n  });\n  Prism.languages.insertBefore('coffeescript', 'comment', {\n    'multiline-comment': {\n      pattern: /###[\\s\\S]+?###/,\n      alias: 'comment'\n    },\n    // Block regexp can contain comments and interpolation\n    'block-regex': {\n      pattern: /\\/{3}[\\s\\S]*?\\/{3}/,\n      alias: 'regex',\n      inside: {\n        'comment': comment,\n        'interpolation': interpolation\n      }\n    }\n  });\n  Prism.languages.insertBefore('coffeescript', 'string', {\n    'inline-javascript': {\n      pattern: /`(?:\\\\[\\s\\S]|[^\\\\`])*`/,\n      inside: {\n        'delimiter': {\n          pattern: /^`|`$/,\n          alias: 'punctuation'\n        },\n        'script': {\n          pattern: /[\\s\\S]+/,\n          alias: 'language-javascript',\n          inside: Prism.languages.javascript\n        }\n      }\n    },\n    // Block strings\n    'multiline-string': [{\n      pattern: /'''[\\s\\S]*?'''/,\n      greedy: true,\n      alias: 'string'\n    }, {\n      pattern: /\"\"\"[\\s\\S]*?\"\"\"/,\n      greedy: true,\n      alias: 'string',\n      inside: {\n        interpolation: interpolation\n      }\n    }]\n  });\n  Prism.languages.insertBefore('coffeescript', 'keyword', {\n    // Object property\n    'property': /(?!\\d)\\w+(?=\\s*:(?!:))/\n  });\n  delete Prism.languages.coffeescript['template-string'];\n  Prism.languages.coffee = Prism.languages.coffeescript;\n})(Prism);\n/* \"prismjs/components/prism-diff\" */\n\n\n(function (Prism) {\n  Prism.languages.diff = {\n    'coord': [// Match all kinds of coord lines (prefixed by \"+++\", \"---\" or \"***\").\n    /^(?:\\*{3}|-{3}|\\+{3}).*$/m, // Match \"@@ ... @@\" coord lines in unified diff.\n    /^@@.*@@$/m, // Match coord lines in normal diff (starts with a number).\n    /^\\d.*$/m] // deleted, inserted, unchanged, diff\n\n  };\n  /**\n   * A map from the name of a block to its line prefix.\n   *\n   * @type {Object<string, string>}\n   */\n\n  var PREFIXES = {\n    'deleted-sign': '-',\n    'deleted-arrow': '<',\n    'inserted-sign': '+',\n    'inserted-arrow': '>',\n    'unchanged': ' ',\n    'diff': '!'\n  }; // add a token for each prefix\n\n  Object.keys(PREFIXES).forEach(function (name) {\n    var prefix = PREFIXES[name];\n    var alias = [];\n\n    if (!/^\\w+$/.test(name)) {\n      // \"deleted-sign\" -> \"deleted\"\n      alias.push(/\\w+/.exec(name)[0]);\n    }\n\n    if (name === \"diff\") {\n      alias.push(\"bold\");\n    }\n\n    Prism.languages.diff[name] = {\n      pattern: RegExp('^(?:[' + prefix + '].*(?:\\r\\n?|\\n|(?![\\\\s\\\\S])))+', 'm'),\n      alias: alias,\n      inside: {\n        'line': {\n          pattern: /(.)(?=[\\s\\S]).*(?:\\r\\n?|\\n)?/,\n          lookbehind: true\n        },\n        'prefix': {\n          pattern: /[\\s\\S]/,\n          alias: /\\w+/.exec(name)[0]\n        }\n      }\n    };\n  }); // make prefixes available to Diff plugin\n\n  Object.defineProperty(Prism.languages.diff, 'PREFIXES', {\n    value: PREFIXES\n  });\n})(Prism);\n/* \"prismjs/components/prism-git\" */\n\n\nPrism.languages.git = {\n  /*\n   * A simple one line comment like in a git status command\n   * For instance:\n   * $ git status\n   * # On branch infinite-scroll\n   * # Your branch and 'origin/sharedBranches/frontendTeam/infinite-scroll' have diverged,\n   * # and have 1 and 2 different commits each, respectively.\n   * nothing to commit (working directory clean)\n   */\n  'comment': /^#.*/m,\n\n  /*\n   * Regexp to match the changed lines in a git diff output. Check the example below.\n   */\n  'deleted': /^[-–].*/m,\n  'inserted': /^\\+.*/m,\n\n  /*\n   * a string (double and simple quote)\n   */\n  'string': /(\"|')(?:\\\\.|(?!\\1)[^\\\\\\r\\n])*\\1/m,\n\n  /*\n   * a git command. It starts with a random prompt finishing by a $, then \"git\" then some other parameters\n   * For instance:\n   * $ git add file.txt\n   */\n  'command': {\n    pattern: /^.*\\$ git .*$/m,\n    inside: {\n      /*\n       * A git command can contain a parameter starting by a single or a double dash followed by a string\n       * For instance:\n       * $ git diff --cached\n       * $ git log -p\n       */\n      'parameter': /\\s--?\\w+/m\n    }\n  },\n\n  /*\n   * Coordinates displayed in a git diff command\n   * For instance:\n   * $ git diff\n   * diff --git file.txt file.txt\n   * index 6214953..1d54a52 100644\n   * --- file.txt\n   * +++ file.txt\n   * @@ -1 +1,2 @@\n   * -Here's my tetx file\n   * +Here's my text file\n   * +And this is the second line\n   */\n  'coord': /^@@.*@@$/m,\n\n  /*\n   * Match a \"commit [SHA1]\" line in a git log output.\n   * For instance:\n   * $ git log\n   * commit a11a14ef7e26f2ca62d4b35eac455ce636d0dc09\n   * Author: lgiraudel\n   * Date:   Mon Feb 17 11:18:34 2014 +0100\n   *\n   *     Add of a new line\n   */\n  'commit-sha1': /^commit \\w{40}$/m\n};\n/* \"prismjs/components/prism-go\" */\n\nPrism.languages.go = Prism.languages.extend('clike', {\n  'string': {\n    pattern: /([\"'`])(?:\\\\[\\s\\S]|(?!\\1)[^\\\\])*\\1/,\n    greedy: true\n  },\n  'keyword': /\\b(?:break|case|chan|const|continue|default|defer|else|fallthrough|for|func|go(?:to)?|if|import|interface|map|package|range|return|select|struct|switch|type|var)\\b/,\n  'boolean': /\\b(?:_|iota|nil|true|false)\\b/,\n  'number': /(?:\\b0x[a-f\\d]+|(?:\\b\\d+(?:\\.\\d*)?|\\B\\.\\d+)(?:e[-+]?\\d+)?)i?/i,\n  'operator': /[*\\/%^!=]=?|\\+[=+]?|-[=-]?|\\|[=|]?|&(?:=|&|\\^=?)?|>(?:>=?|=)?|<(?:<=?|=|-)?|:=|\\.\\.\\./,\n  'builtin': /\\b(?:bool|byte|complex(?:64|128)|error|float(?:32|64)|rune|string|u?int(?:8|16|32|64)?|uintptr|append|cap|close|complex|copy|delete|imag|len|make|new|panic|print(?:ln)?|real|recover)\\b/\n});\ndelete Prism.languages.go['class-name'];\n/* \"prismjs/components/prism-graphql\" */\n\nPrism.languages.graphql = {\n  'comment': /#.*/,\n  'description': {\n    pattern: /(?:\"\"\"(?:[^\"]|(?!\"\"\")\")*\"\"\"|\"(?:\\\\.|[^\\\\\"\\r\\n])*\")(?=\\s*[a-z_])/i,\n    greedy: true,\n    alias: 'string',\n    inside: {\n      'language-markdown': {\n        pattern: /(^\"(?:\"\")?)(?!\\1)[\\s\\S]+(?=\\1$)/,\n        lookbehind: true,\n        inside: Prism.languages.markdown\n      }\n    }\n  },\n  'string': {\n    pattern: /\"\"\"(?:[^\"]|(?!\"\"\")\")*\"\"\"|\"(?:\\\\.|[^\\\\\"\\r\\n])*\"/,\n    greedy: true\n  },\n  'number': /(?:\\B-|\\b)\\d+(?:\\.\\d+)?(?:e[+-]?\\d+)?\\b/i,\n  'boolean': /\\b(?:true|false)\\b/,\n  'variable': /\\$[a-z_]\\w*/i,\n  'directive': {\n    pattern: /@[a-z_]\\w*/i,\n    alias: 'function'\n  },\n  'attr-name': {\n    pattern: /[a-z_]\\w*(?=\\s*(?:\\((?:[^()\"]|\"(?:\\\\.|[^\\\\\"\\r\\n])*\")*\\))?:)/i,\n    greedy: true\n  },\n  'class-name': {\n    pattern: /(\\b(?:enum|implements|interface|on|scalar|type|union)\\s+|&\\s*)[a-zA-Z_]\\w*/,\n    lookbehind: true\n  },\n  'fragment': {\n    pattern: /(\\bfragment\\s+|\\.{3}\\s*(?!on\\b))[a-zA-Z_]\\w*/,\n    lookbehind: true,\n    alias: 'function'\n  },\n  'keyword': /\\b(?:directive|enum|extend|fragment|implements|input|interface|mutation|on|query|repeatable|scalar|schema|subscription|type|union)\\b/,\n  'operator': /[!=|&]|\\.{3}/,\n  'punctuation': /[!(){}\\[\\]:=,]/,\n  'constant': /\\b(?!ID\\b)[A-Z][A-Z_\\d]*\\b/\n};\n/* \"prismjs/components/prism-markup-templating\" */\n\n(function (Prism) {\n  /**\n   * Returns the placeholder for the given language id and index.\n   *\n   * @param {string} language\n   * @param {string|number} index\n   * @returns {string}\n   */\n  function getPlaceholder(language, index) {\n    return '___' + language.toUpperCase() + index + '___';\n  }\n\n  Object.defineProperties(Prism.languages['markup-templating'] = {}, {\n    buildPlaceholders: {\n      /**\n       * Tokenize all inline templating expressions matching `placeholderPattern`.\n       *\n       * If `replaceFilter` is provided, only matches of `placeholderPattern` for which `replaceFilter` returns\n       * `true` will be replaced.\n       *\n       * @param {object} env The environment of the `before-tokenize` hook.\n       * @param {string} language The language id.\n       * @param {RegExp} placeholderPattern The matches of this pattern will be replaced by placeholders.\n       * @param {(match: string) => boolean} [replaceFilter]\n       */\n      value: function (env, language, placeholderPattern, replaceFilter) {\n        if (env.language !== language) {\n          return;\n        }\n\n        var tokenStack = env.tokenStack = [];\n        env.code = env.code.replace(placeholderPattern, function (match) {\n          if (typeof replaceFilter === 'function' && !replaceFilter(match)) {\n            return match;\n          }\n\n          var i = tokenStack.length;\n          var placeholder; // Check for existing strings\n\n          while (env.code.indexOf(placeholder = getPlaceholder(language, i)) !== -1) {\n            ++i;\n          } // Create a sparse array\n\n\n          tokenStack[i] = match;\n          return placeholder;\n        }); // Switch the grammar to markup\n\n        env.grammar = Prism.languages.markup;\n      }\n    },\n    tokenizePlaceholders: {\n      /**\n       * Replace placeholders with proper tokens after tokenizing.\n       *\n       * @param {object} env The environment of the `after-tokenize` hook.\n       * @param {string} language The language id.\n       */\n      value: function (env, language) {\n        if (env.language !== language || !env.tokenStack) {\n          return;\n        } // Switch the grammar back\n\n\n        env.grammar = Prism.languages[language];\n        var j = 0;\n        var keys = Object.keys(env.tokenStack);\n\n        function walkTokens(tokens) {\n          for (var i = 0; i < tokens.length; i++) {\n            // all placeholders are replaced already\n            if (j >= keys.length) {\n              break;\n            }\n\n            var token = tokens[i];\n\n            if (typeof token === 'string' || token.content && typeof token.content === 'string') {\n              var k = keys[j];\n              var t = env.tokenStack[k];\n              var s = typeof token === 'string' ? token : token.content;\n              var placeholder = getPlaceholder(language, k);\n              var index = s.indexOf(placeholder);\n\n              if (index > -1) {\n                ++j;\n                var before = s.substring(0, index);\n                var middle = new Prism.Token(language, Prism.tokenize(t, env.grammar), 'language-' + language, t);\n                var after = s.substring(index + placeholder.length);\n                var replacement = [];\n\n                if (before) {\n                  replacement.push.apply(replacement, walkTokens([before]));\n                }\n\n                replacement.push(middle);\n\n                if (after) {\n                  replacement.push.apply(replacement, walkTokens([after]));\n                }\n\n                if (typeof token === 'string') {\n                  tokens.splice.apply(tokens, [i, 1].concat(replacement));\n                } else {\n                  token.content = replacement;\n                }\n              }\n            } else if (token.content\n            /* && typeof token.content !== 'string' */\n            ) {\n                walkTokens(token.content);\n              }\n          }\n\n          return tokens;\n        }\n\n        walkTokens(env.tokens);\n      }\n    }\n  });\n})(Prism);\n/* \"prismjs/components/prism-handlebars\" */\n\n\n(function (Prism) {\n  Prism.languages.handlebars = {\n    'comment': /\\{\\{![\\s\\S]*?\\}\\}/,\n    'delimiter': {\n      pattern: /^\\{\\{\\{?|\\}\\}\\}?$/i,\n      alias: 'punctuation'\n    },\n    'string': /([\"'])(?:\\\\.|(?!\\1)[^\\\\\\r\\n])*\\1/,\n    'number': /\\b0x[\\dA-Fa-f]+\\b|(?:\\b\\d+(?:\\.\\d*)?|\\B\\.\\d+)(?:[Ee][+-]?\\d+)?/,\n    'boolean': /\\b(?:true|false)\\b/,\n    'block': {\n      pattern: /^(\\s*(?:~\\s*)?)[#\\/]\\S+?(?=\\s*(?:~\\s*)?$|\\s)/i,\n      lookbehind: true,\n      alias: 'keyword'\n    },\n    'brackets': {\n      pattern: /\\[[^\\]]+\\]/,\n      inside: {\n        punctuation: /\\[|\\]/,\n        variable: /[\\s\\S]+/\n      }\n    },\n    'punctuation': /[!\"#%&':()*+,.\\/;<=>@\\[\\\\\\]^`{|}~]/,\n    'variable': /[^!\"#%&'()*+,\\/;<=>@\\[\\\\\\]^`{|}~\\s]+/\n  };\n  Prism.hooks.add('before-tokenize', function (env) {\n    var handlebarsPattern = /\\{\\{\\{[\\s\\S]+?\\}\\}\\}|\\{\\{[\\s\\S]+?\\}\\}/g;\n    Prism.languages['markup-templating'].buildPlaceholders(env, 'handlebars', handlebarsPattern);\n  });\n  Prism.hooks.add('after-tokenize', function (env) {\n    Prism.languages['markup-templating'].tokenizePlaceholders(env, 'handlebars');\n  });\n})(Prism);\n/* \"prismjs/components/prism-json\" */\n// https://www.json.org/json-en.html\n\n\nPrism.languages.json = {\n  'property': {\n    pattern: /\"(?:\\\\.|[^\\\\\"\\r\\n])*\"(?=\\s*:)/,\n    greedy: true\n  },\n  'string': {\n    pattern: /\"(?:\\\\.|[^\\\\\"\\r\\n])*\"(?!\\s*:)/,\n    greedy: true\n  },\n  'comment': {\n    pattern: /\\/\\/.*|\\/\\*[\\s\\S]*?(?:\\*\\/|$)/,\n    greedy: true\n  },\n  'number': /-?\\b\\d+(?:\\.\\d+)?(?:e[+-]?\\d+)?\\b/i,\n  'punctuation': /[{}[\\],]/,\n  'operator': /:/,\n  'boolean': /\\b(?:true|false)\\b/,\n  'null': {\n    pattern: /\\bnull\\b/,\n    alias: 'keyword'\n  }\n};\nPrism.languages.webmanifest = Prism.languages.json;\n/* \"prismjs/components/prism-less\" */\n\n/* FIXME :\n :extend() is not handled specifically : its highlighting is buggy.\n Mixin usage must be inside a ruleset to be highlighted.\n At-rules (e.g. import) containing interpolations are buggy.\n Detached rulesets are highlighted as at-rules.\n A comment before a mixin usage prevents the latter to be properly highlighted.\n */\n\nPrism.languages.less = Prism.languages.extend('css', {\n  'comment': [/\\/\\*[\\s\\S]*?\\*\\//, {\n    pattern: /(^|[^\\\\])\\/\\/.*/,\n    lookbehind: true\n  }],\n  'atrule': {\n    pattern: /@[\\w-](?:\\((?:[^(){}]|\\([^(){}]*\\))*\\)|[^(){};\\s]|\\s+(?!\\s))*?(?=\\s*\\{)/,\n    inside: {\n      'punctuation': /[:()]/\n    }\n  },\n  // selectors and mixins are considered the same\n  'selector': {\n    pattern: /(?:@\\{[\\w-]+\\}|[^{};\\s@])(?:@\\{[\\w-]+\\}|\\((?:[^(){}]|\\([^(){}]*\\))*\\)|[^(){};@\\s]|\\s+(?!\\s))*?(?=\\s*\\{)/,\n    inside: {\n      // mixin parameters\n      'variable': /@+[\\w-]+/\n    }\n  },\n  'property': /(?:@\\{[\\w-]+\\}|[\\w-])+(?:\\+_?)?(?=\\s*:)/i,\n  'operator': /[+\\-*\\/]/\n});\nPrism.languages.insertBefore('less', 'property', {\n  'variable': [// Variable declaration (the colon must be consumed!)\n  {\n    pattern: /@[\\w-]+\\s*:/,\n    inside: {\n      \"punctuation\": /:/\n    }\n  }, // Variable usage\n  /@@?[\\w-]+/],\n  'mixin-usage': {\n    pattern: /([{;]\\s*)[.#](?!\\d)[\\w-].*?(?=[(;])/,\n    lookbehind: true,\n    alias: 'function'\n  }\n});\n/* \"prismjs/components/prism-makefile\" */\n\nPrism.languages.makefile = {\n  'comment': {\n    pattern: /(^|[^\\\\])#(?:\\\\(?:\\r\\n|[\\s\\S])|[^\\\\\\r\\n])*/,\n    lookbehind: true\n  },\n  'string': {\n    pattern: /([\"'])(?:\\\\(?:\\r\\n|[\\s\\S])|(?!\\1)[^\\\\\\r\\n])*\\1/,\n    greedy: true\n  },\n  // Built-in target names\n  'builtin': /\\.[A-Z][^:#=\\s]+(?=\\s*:(?!=))/,\n  // Targets\n  'symbol': {\n    pattern: /^(?:[^:=\\s]|[ \\t]+(?![\\s:]))+(?=\\s*:(?!=))/m,\n    inside: {\n      'variable': /\\$+(?:(?!\\$)[^(){}:#=\\s]+|(?=[({]))/\n    }\n  },\n  'variable': /\\$+(?:(?!\\$)[^(){}:#=\\s]+|\\([@*%<^+?][DF]\\)|(?=[({]))/,\n  'keyword': [// Directives\n  /-include\\b|\\b(?:define|else|endef|endif|export|ifn?def|ifn?eq|include|override|private|sinclude|undefine|unexport|vpath)\\b/, // Functions\n  {\n    pattern: /(\\()(?:addsuffix|abspath|and|basename|call|dir|error|eval|file|filter(?:-out)?|findstring|firstword|flavor|foreach|guile|if|info|join|lastword|load|notdir|or|origin|patsubst|realpath|shell|sort|strip|subst|suffix|value|warning|wildcard|word(?:s|list)?)(?=[ \\t])/,\n    lookbehind: true\n  }],\n  'operator': /(?:::|[?:+!])?=|[|@]/,\n  'punctuation': /[:;(){}]/\n};\n/* \"prismjs/components/prism-markdown\" */\n\n(function (Prism) {\n  // Allow only one line break\n  var inner = /(?:\\\\.|[^\\\\\\n\\r]|(?:\\n|\\r\\n?)(?!\\n|\\r\\n?))/.source;\n  /**\n   * This function is intended for the creation of the bold or italic pattern.\n   *\n   * This also adds a lookbehind group to the given pattern to ensure that the pattern is not backslash-escaped.\n   *\n   * _Note:_ Keep in mind that this adds a capturing group.\n   *\n   * @param {string} pattern\n   * @returns {RegExp}\n   */\n\n  function createInline(pattern) {\n    pattern = pattern.replace(/<inner>/g, function () {\n      return inner;\n    });\n    return RegExp(/((?:^|[^\\\\])(?:\\\\{2})*)/.source + '(?:' + pattern + ')');\n  }\n\n  var tableCell = /(?:\\\\.|``(?:[^`\\r\\n]|`(?!`))+``|`[^`\\r\\n]+`|[^\\\\|\\r\\n`])+/.source;\n  var tableRow = /\\|?__(?:\\|__)+\\|?(?:(?:\\n|\\r\\n?)|(?![\\s\\S]))/.source.replace(/__/g, function () {\n    return tableCell;\n  });\n  var tableLine = /\\|?[ \\t]*:?-{3,}:?[ \\t]*(?:\\|[ \\t]*:?-{3,}:?[ \\t]*)+\\|?(?:\\n|\\r\\n?)/.source;\n  Prism.languages.markdown = Prism.languages.extend('markup', {});\n  Prism.languages.insertBefore('markdown', 'prolog', {\n    'front-matter-block': {\n      pattern: /(^(?:\\s*[\\r\\n])?)---(?!.)[\\s\\S]*?[\\r\\n]---(?!.)/,\n      lookbehind: true,\n      greedy: true,\n      inside: {\n        'punctuation': /^---|---$/,\n        'font-matter': {\n          pattern: /\\S+(?:\\s+\\S+)*/,\n          alias: ['yaml', 'language-yaml'],\n          inside: Prism.languages.yaml\n        }\n      }\n    },\n    'blockquote': {\n      // > ...\n      pattern: /^>(?:[\\t ]*>)*/m,\n      alias: 'punctuation'\n    },\n    'table': {\n      pattern: RegExp('^' + tableRow + tableLine + '(?:' + tableRow + ')*', 'm'),\n      inside: {\n        'table-data-rows': {\n          pattern: RegExp('^(' + tableRow + tableLine + ')(?:' + tableRow + ')*$'),\n          lookbehind: true,\n          inside: {\n            'table-data': {\n              pattern: RegExp(tableCell),\n              inside: Prism.languages.markdown\n            },\n            'punctuation': /\\|/\n          }\n        },\n        'table-line': {\n          pattern: RegExp('^(' + tableRow + ')' + tableLine + '$'),\n          lookbehind: true,\n          inside: {\n            'punctuation': /\\||:?-{3,}:?/\n          }\n        },\n        'table-header-row': {\n          pattern: RegExp('^' + tableRow + '$'),\n          inside: {\n            'table-header': {\n              pattern: RegExp(tableCell),\n              alias: 'important',\n              inside: Prism.languages.markdown\n            },\n            'punctuation': /\\|/\n          }\n        }\n      }\n    },\n    'code': [{\n      // Prefixed by 4 spaces or 1 tab and preceded by an empty line\n      pattern: /((?:^|\\n)[ \\t]*\\n|(?:^|\\r\\n?)[ \\t]*\\r\\n?)(?: {4}|\\t).+(?:(?:\\n|\\r\\n?)(?: {4}|\\t).+)*/,\n      lookbehind: true,\n      alias: 'keyword'\n    }, {\n      // `code`\n      // ``code``\n      pattern: /``.+?``|`[^`\\r\\n]+`/,\n      alias: 'keyword'\n    }, {\n      // ```optional language\n      // code block\n      // ```\n      pattern: /^```[\\s\\S]*?^```$/m,\n      greedy: true,\n      inside: {\n        'code-block': {\n          pattern: /^(```.*(?:\\n|\\r\\n?))[\\s\\S]+?(?=(?:\\n|\\r\\n?)^```$)/m,\n          lookbehind: true\n        },\n        'code-language': {\n          pattern: /^(```).+/,\n          lookbehind: true\n        },\n        'punctuation': /```/\n      }\n    }],\n    'title': [{\n      // title 1\n      // =======\n      // title 2\n      // -------\n      pattern: /\\S.*(?:\\n|\\r\\n?)(?:==+|--+)(?=[ \\t]*$)/m,\n      alias: 'important',\n      inside: {\n        punctuation: /==+$|--+$/\n      }\n    }, {\n      // # title 1\n      // ###### title 6\n      pattern: /(^\\s*)#.+/m,\n      lookbehind: true,\n      alias: 'important',\n      inside: {\n        punctuation: /^#+|#+$/\n      }\n    }],\n    'hr': {\n      // ***\n      // ---\n      // * * *\n      // -----------\n      pattern: /(^\\s*)([*-])(?:[\\t ]*\\2){2,}(?=\\s*$)/m,\n      lookbehind: true,\n      alias: 'punctuation'\n    },\n    'list': {\n      // * item\n      // + item\n      // - item\n      // 1. item\n      pattern: /(^\\s*)(?:[*+-]|\\d+\\.)(?=[\\t ].)/m,\n      lookbehind: true,\n      alias: 'punctuation'\n    },\n    'url-reference': {\n      // [id]: http://example.com \"Optional title\"\n      // [id]: http://example.com 'Optional title'\n      // [id]: http://example.com (Optional title)\n      // [id]: <http://example.com> \"Optional title\"\n      pattern: /!?\\[[^\\]]+\\]:[\\t ]+(?:\\S+|<(?:\\\\.|[^>\\\\])+>)(?:[\\t ]+(?:\"(?:\\\\.|[^\"\\\\])*\"|'(?:\\\\.|[^'\\\\])*'|\\((?:\\\\.|[^)\\\\])*\\)))?/,\n      inside: {\n        'variable': {\n          pattern: /^(!?\\[)[^\\]]+/,\n          lookbehind: true\n        },\n        'string': /(?:\"(?:\\\\.|[^\"\\\\])*\"|'(?:\\\\.|[^'\\\\])*'|\\((?:\\\\.|[^)\\\\])*\\))$/,\n        'punctuation': /^[\\[\\]!:]|[<>]/\n      },\n      alias: 'url'\n    },\n    'bold': {\n      // **strong**\n      // __strong__\n      // allow one nested instance of italic text using the same delimiter\n      pattern: createInline(/\\b__(?:(?!_)<inner>|_(?:(?!_)<inner>)+_)+__\\b|\\*\\*(?:(?!\\*)<inner>|\\*(?:(?!\\*)<inner>)+\\*)+\\*\\*/.source),\n      lookbehind: true,\n      greedy: true,\n      inside: {\n        'content': {\n          pattern: /(^..)[\\s\\S]+(?=..$)/,\n          lookbehind: true,\n          inside: {} // see below\n\n        },\n        'punctuation': /\\*\\*|__/\n      }\n    },\n    'italic': {\n      // *em*\n      // _em_\n      // allow one nested instance of bold text using the same delimiter\n      pattern: createInline(/\\b_(?:(?!_)<inner>|__(?:(?!_)<inner>)+__)+_\\b|\\*(?:(?!\\*)<inner>|\\*\\*(?:(?!\\*)<inner>)+\\*\\*)+\\*/.source),\n      lookbehind: true,\n      greedy: true,\n      inside: {\n        'content': {\n          pattern: /(^.)[\\s\\S]+(?=.$)/,\n          lookbehind: true,\n          inside: {} // see below\n\n        },\n        'punctuation': /[*_]/\n      }\n    },\n    'strike': {\n      // ~~strike through~~\n      // ~strike~\n      pattern: createInline(/(~~?)(?:(?!~)<inner>)+?\\2/.source),\n      lookbehind: true,\n      greedy: true,\n      inside: {\n        'content': {\n          pattern: /(^~~?)[\\s\\S]+(?=\\1$)/,\n          lookbehind: true,\n          inside: {} // see below\n\n        },\n        'punctuation': /~~?/\n      }\n    },\n    'url': {\n      // [example](http://example.com \"Optional title\")\n      // [example][id]\n      // [example] [id]\n      pattern: createInline(/!?\\[(?:(?!\\])<inner>)+\\](?:\\([^\\s)]+(?:[\\t ]+\"(?:\\\\.|[^\"\\\\])*\")?\\)|[ \\t]?\\[(?:(?!\\])<inner>)+\\])/.source),\n      lookbehind: true,\n      greedy: true,\n      inside: {\n        'operator': /^!/,\n        'content': {\n          pattern: /(^\\[)[^\\]]+(?=\\])/,\n          lookbehind: true,\n          inside: {} // see below\n\n        },\n        'variable': {\n          pattern: /(^\\][ \\t]?\\[)[^\\]]+(?=\\]$)/,\n          lookbehind: true\n        },\n        'url': {\n          pattern: /(^\\]\\()[^\\s)]+/,\n          lookbehind: true\n        },\n        'string': {\n          pattern: /(^[ \\t]+)\"(?:\\\\.|[^\"\\\\])*\"(?=\\)$)/,\n          lookbehind: true\n        }\n      }\n    }\n  });\n  ['url', 'bold', 'italic', 'strike'].forEach(function (token) {\n    ['url', 'bold', 'italic', 'strike'].forEach(function (inside) {\n      if (token !== inside) {\n        Prism.languages.markdown[token].inside.content.inside[inside] = Prism.languages.markdown[inside];\n      }\n    });\n  });\n  Prism.hooks.add('after-tokenize', function (env) {\n    if (env.language !== 'markdown' && env.language !== 'md') {\n      return;\n    }\n\n    function walkTokens(tokens) {\n      if (!tokens || typeof tokens === 'string') {\n        return;\n      }\n\n      for (var i = 0, l = tokens.length; i < l; i++) {\n        var token = tokens[i];\n\n        if (token.type !== 'code') {\n          walkTokens(token.content);\n          continue;\n        }\n        /*\n         * Add the correct `language-xxxx` class to this code block. Keep in mind that the `code-language` token\n         * is optional. But the grammar is defined so that there is only one case we have to handle:\n         *\n         * token.content = [\n         *     <span class=\"punctuation\">```</span>,\n         *     <span class=\"code-language\">xxxx</span>,\n         *     '\\n', // exactly one new lines (\\r or \\n or \\r\\n)\n         *     <span class=\"code-block\">...</span>,\n         *     '\\n', // exactly one new lines again\n         *     <span class=\"punctuation\">```</span>\n         * ];\n         */\n\n\n        var codeLang = token.content[1];\n        var codeBlock = token.content[3];\n\n        if (codeLang && codeBlock && codeLang.type === 'code-language' && codeBlock.type === 'code-block' && typeof codeLang.content === 'string') {\n          // this might be a language that Prism does not support\n          // do some replacements to support C++, C#, and F#\n          var lang = codeLang.content.replace(/\\b#/g, 'sharp').replace(/\\b\\+\\+/g, 'pp'); // only use the first word\n\n          lang = (/[a-z][\\w-]*/i.exec(lang) || [''])[0].toLowerCase();\n          var alias = 'language-' + lang; // add alias\n\n          if (!codeBlock.alias) {\n            codeBlock.alias = [alias];\n          } else if (typeof codeBlock.alias === 'string') {\n            codeBlock.alias = [codeBlock.alias, alias];\n          } else {\n            codeBlock.alias.push(alias);\n          }\n        }\n      }\n    }\n\n    walkTokens(env.tokens);\n  });\n  Prism.hooks.add('wrap', function (env) {\n    if (env.type !== 'code-block') {\n      return;\n    }\n\n    var codeLang = '';\n\n    for (var i = 0, l = env.classes.length; i < l; i++) {\n      var cls = env.classes[i];\n      var match = /language-(.+)/.exec(cls);\n\n      if (match) {\n        codeLang = match[1];\n        break;\n      }\n    }\n\n    var grammar = Prism.languages[codeLang];\n\n    if (!grammar) {\n      if (codeLang && codeLang !== 'none' && Prism.plugins.autoloader) {\n        var id = 'md-' + new Date().valueOf() + '-' + Math.floor(Math.random() * 1e16);\n        env.attributes['id'] = id;\n        Prism.plugins.autoloader.loadLanguages(codeLang, function () {\n          var ele = document.getElementById(id);\n\n          if (ele) {\n            ele.innerHTML = Prism.highlight(ele.textContent, Prism.languages[codeLang], codeLang);\n          }\n        });\n      }\n    } else {\n      // reverse Prism.util.encode\n      var code = env.content.replace(/&lt;/g, '<').replace(/&amp;/g, '&');\n      env.content = Prism.highlight(code, grammar, codeLang);\n    }\n  });\n  Prism.languages.md = Prism.languages.markdown;\n})(Prism);\n/* \"prismjs/components/prism-objectivec\" */\n\n\nPrism.languages.objectivec = Prism.languages.extend('c', {\n  'string': /(\"|')(?:\\\\(?:\\r\\n|[\\s\\S])|(?!\\1)[^\\\\\\r\\n])*\\1|@\"(?:\\\\(?:\\r\\n|[\\s\\S])|[^\"\\\\\\r\\n])*\"/,\n  'keyword': /\\b(?:asm|typeof|inline|auto|break|case|char|const|continue|default|do|double|else|enum|extern|float|for|goto|if|int|long|register|return|short|signed|sizeof|static|struct|switch|typedef|union|unsigned|void|volatile|while|in|self|super)\\b|(?:@interface|@end|@implementation|@protocol|@class|@public|@protected|@private|@property|@try|@catch|@finally|@throw|@synthesize|@dynamic|@selector)\\b/,\n  'operator': /-[->]?|\\+\\+?|!=?|<<?=?|>>?=?|==?|&&?|\\|\\|?|[~^%?*\\/@]/\n});\ndelete Prism.languages.objectivec['class-name'];\nPrism.languages.objc = Prism.languages.objectivec;\n/* \"prismjs/components/prism-ocaml\" */\n\nPrism.languages.ocaml = {\n  'comment': /\\(\\*[\\s\\S]*?\\*\\)/,\n  'string': [{\n    pattern: /\"(?:\\\\.|[^\\\\\\r\\n\"])*\"/,\n    greedy: true\n  }, {\n    pattern: /(['`])(?:\\\\(?:\\d+|x[\\da-f]+|.)|(?!\\1)[^\\\\\\r\\n])\\1/i,\n    greedy: true\n  }],\n  'number': /\\b(?:0x[\\da-f][\\da-f_]+|(?:0[bo])?\\d[\\d_]*(?:\\.[\\d_]*)?(?:e[+-]?[\\d_]+)?)/i,\n  'directive': {\n    pattern: /\\B#\\w+/,\n    alias: 'important'\n  },\n  'label': {\n    pattern: /\\B~\\w+/,\n    alias: 'function'\n  },\n  'type-variable': {\n    pattern: /\\B'\\w+/,\n    alias: 'function'\n  },\n  'variant': {\n    pattern: /`\\w+/,\n    alias: 'variable'\n  },\n  'module': {\n    pattern: /\\b[A-Z]\\w+/,\n    alias: 'variable'\n  },\n  // For the list of keywords and operators,\n  // see: http://caml.inria.fr/pub/docs/manual-ocaml/lex.html#sec84\n  'keyword': /\\b(?:as|assert|begin|class|constraint|do|done|downto|else|end|exception|external|for|fun|function|functor|if|in|include|inherit|initializer|lazy|let|match|method|module|mutable|new|nonrec|object|of|open|private|rec|sig|struct|then|to|try|type|val|value|virtual|when|where|while|with)\\b/,\n  'boolean': /\\b(?:false|true)\\b/,\n  // Custom operators are allowed\n  'operator': /:=|[=<>@^|&+\\-*\\/$%!?~][!$%&*+\\-.\\/:<=>?@^|~]*|\\b(?:and|asr|land|lor|lsl|lsr|lxor|mod|or)\\b/,\n  'punctuation': /[(){}\\[\\]|.,:;]|\\b_\\b/\n};\n/* \"prismjs/components/prism-python\" */\n\nPrism.languages.python = {\n  'comment': {\n    pattern: /(^|[^\\\\])#.*/,\n    lookbehind: true\n  },\n  'string-interpolation': {\n    pattern: /(?:f|rf|fr)(?:(\"\"\"|''')[\\s\\S]*?\\1|(\"|')(?:\\\\.|(?!\\2)[^\\\\\\r\\n])*\\2)/i,\n    greedy: true,\n    inside: {\n      'interpolation': {\n        // \"{\" <expression> <optional \"!s\", \"!r\", or \"!a\"> <optional \":\" format specifier> \"}\"\n        pattern: /((?:^|[^{])(?:{{)*){(?!{)(?:[^{}]|{(?!{)(?:[^{}]|{(?!{)(?:[^{}])+})+})+}/,\n        lookbehind: true,\n        inside: {\n          'format-spec': {\n            pattern: /(:)[^:(){}]+(?=}$)/,\n            lookbehind: true\n          },\n          'conversion-option': {\n            pattern: /![sra](?=[:}]$)/,\n            alias: 'punctuation'\n          },\n          rest: null\n        }\n      },\n      'string': /[\\s\\S]+/\n    }\n  },\n  'triple-quoted-string': {\n    pattern: /(?:[rub]|rb|br)?(\"\"\"|''')[\\s\\S]*?\\1/i,\n    greedy: true,\n    alias: 'string'\n  },\n  'string': {\n    pattern: /(?:[rub]|rb|br)?(\"|')(?:\\\\.|(?!\\1)[^\\\\\\r\\n])*\\1/i,\n    greedy: true\n  },\n  'function': {\n    pattern: /((?:^|\\s)def[ \\t]+)[a-zA-Z_]\\w*(?=\\s*\\()/g,\n    lookbehind: true\n  },\n  'class-name': {\n    pattern: /(\\bclass\\s+)\\w+/i,\n    lookbehind: true\n  },\n  'decorator': {\n    pattern: /(^\\s*)@\\w+(?:\\.\\w+)*/im,\n    lookbehind: true,\n    alias: ['annotation', 'punctuation'],\n    inside: {\n      'punctuation': /\\./\n    }\n  },\n  'keyword': /\\b(?:and|as|assert|async|await|break|class|continue|def|del|elif|else|except|exec|finally|for|from|global|if|import|in|is|lambda|nonlocal|not|or|pass|print|raise|return|try|while|with|yield)\\b/,\n  'builtin': /\\b(?:__import__|abs|all|any|apply|ascii|basestring|bin|bool|buffer|bytearray|bytes|callable|chr|classmethod|cmp|coerce|compile|complex|delattr|dict|dir|divmod|enumerate|eval|execfile|file|filter|float|format|frozenset|getattr|globals|hasattr|hash|help|hex|id|input|int|intern|isinstance|issubclass|iter|len|list|locals|long|map|max|memoryview|min|next|object|oct|open|ord|pow|property|range|raw_input|reduce|reload|repr|reversed|round|set|setattr|slice|sorted|staticmethod|str|sum|super|tuple|type|unichr|unicode|vars|xrange|zip)\\b/,\n  'boolean': /\\b(?:True|False|None)\\b/,\n  'number': /(?:\\b(?=\\d)|\\B(?=\\.))(?:0[bo])?(?:(?:\\d|0x[\\da-f])[\\da-f]*(?:\\.\\d*)?|\\.\\d+)(?:e[+-]?\\d+)?j?\\b/i,\n  'operator': /[-+%=]=?|!=|\\*\\*?=?|\\/\\/?=?|<[<=>]?|>[=>]?|[&|^~]/,\n  'punctuation': /[{}[\\];(),.:]/\n};\nPrism.languages.python['string-interpolation'].inside['interpolation'].inside.rest = Prism.languages.python;\nPrism.languages.py = Prism.languages.python;\n/* \"prismjs/components/prism-reason\" */\n\nPrism.languages.reason = Prism.languages.extend('clike', {\n  'string': {\n    pattern: /\"(?:\\\\(?:\\r\\n|[\\s\\S])|[^\\\\\\r\\n\"])*\"/,\n    greedy: true\n  },\n  // 'class-name' must be matched *after* 'constructor' defined below\n  'class-name': /\\b[A-Z]\\w*/,\n  'keyword': /\\b(?:and|as|assert|begin|class|constraint|do|done|downto|else|end|exception|external|for|fun|function|functor|if|in|include|inherit|initializer|lazy|let|method|module|mutable|new|nonrec|object|of|open|or|private|rec|sig|struct|switch|then|to|try|type|val|virtual|when|while|with)\\b/,\n  'operator': /\\.{3}|:[:=]|\\|>|->|=(?:==?|>)?|<=?|>=?|[|^?'#!~`]|[+\\-*\\/]\\.?|\\b(?:mod|land|lor|lxor|lsl|lsr|asr)\\b/\n});\nPrism.languages.insertBefore('reason', 'class-name', {\n  'character': {\n    pattern: /'(?:\\\\x[\\da-f]{2}|\\\\o[0-3][0-7][0-7]|\\\\\\d{3}|\\\\.|[^'\\\\\\r\\n])'/,\n    alias: 'string'\n  },\n  'constructor': {\n    // Negative look-ahead prevents from matching things like String.capitalize\n    pattern: /\\b[A-Z]\\w*\\b(?!\\s*\\.)/,\n    alias: 'variable'\n  },\n  'label': {\n    pattern: /\\b[a-z]\\w*(?=::)/,\n    alias: 'symbol'\n  }\n}); // We can't match functions property, so let's not even try.\n\ndelete Prism.languages.reason.function;\n/* \"prismjs/components/prism-sass\" */\n\n(function (Prism) {\n  Prism.languages.sass = Prism.languages.extend('css', {\n    // Sass comments don't need to be closed, only indented\n    'comment': {\n      pattern: /^([ \\t]*)\\/[\\/*].*(?:(?:\\r?\\n|\\r)\\1[ \\t].+)*/m,\n      lookbehind: true\n    }\n  });\n  Prism.languages.insertBefore('sass', 'atrule', {\n    // We want to consume the whole line\n    'atrule-line': {\n      // Includes support for = and + shortcuts\n      pattern: /^(?:[ \\t]*)[@+=].+/m,\n      inside: {\n        'atrule': /(?:@[\\w-]+|[+=])/m\n      }\n    }\n  });\n  delete Prism.languages.sass.atrule;\n  var variable = /\\$[-\\w]+|#\\{\\$[-\\w]+\\}/;\n  var operator = [/[+*\\/%]|[=!]=|<=?|>=?|\\b(?:and|or|not)\\b/, {\n    pattern: /(\\s+)-(?=\\s)/,\n    lookbehind: true\n  }];\n  Prism.languages.insertBefore('sass', 'property', {\n    // We want to consume the whole line\n    'variable-line': {\n      pattern: /^[ \\t]*\\$.+/m,\n      inside: {\n        'punctuation': /:/,\n        'variable': variable,\n        'operator': operator\n      }\n    },\n    // We want to consume the whole line\n    'property-line': {\n      pattern: /^[ \\t]*(?:[^:\\s]+ *:.*|:[^:\\s].*)/m,\n      inside: {\n        'property': [/[^:\\s]+(?=\\s*:)/, {\n          pattern: /(:)[^:\\s]+/,\n          lookbehind: true\n        }],\n        'punctuation': /:/,\n        'variable': variable,\n        'operator': operator,\n        'important': Prism.languages.sass.important\n      }\n    }\n  });\n  delete Prism.languages.sass.property;\n  delete Prism.languages.sass.important; // Now that whole lines for other patterns are consumed,\n  // what's left should be selectors\n\n  Prism.languages.insertBefore('sass', 'punctuation', {\n    'selector': {\n      pattern: /([ \\t]*)\\S(?:,[^,\\r\\n]+|[^,\\r\\n]*)(?:,[^,\\r\\n]+)*(?:,(?:\\r?\\n|\\r)\\1[ \\t]+\\S(?:,[^,\\r\\n]+|[^,\\r\\n]*)(?:,[^,\\r\\n]+)*)*/,\n      lookbehind: true\n    }\n  });\n})(Prism);\n/* \"prismjs/components/prism-scss\" */\n\n\nPrism.languages.scss = Prism.languages.extend('css', {\n  'comment': {\n    pattern: /(^|[^\\\\])(?:\\/\\*[\\s\\S]*?\\*\\/|\\/\\/.*)/,\n    lookbehind: true\n  },\n  'atrule': {\n    pattern: /@[\\w-](?:\\([^()]+\\)|[^()\\s]|\\s+(?!\\s))*?(?=\\s+[{;])/,\n    inside: {\n      'rule': /@[\\w-]+/ // See rest below\n\n    }\n  },\n  // url, compassified\n  'url': /(?:[-a-z]+-)?url(?=\\()/i,\n  // CSS selector regex is not appropriate for Sass\n  // since there can be lot more things (var, @ directive, nesting..)\n  // a selector must start at the end of a property or after a brace (end of other rules or nesting)\n  // it can contain some characters that aren't used for defining rules or end of selector, & (parent selector), or interpolated variable\n  // the end of a selector is found when there is no rules in it ( {} or {\\s}) or if there is a property (because an interpolated var\n  // can \"pass\" as a selector- e.g: proper#{$erty})\n  // this one was hard to do, so please be careful if you edit this one :)\n  'selector': {\n    // Initial look-ahead is used to prevent matching of blank selectors\n    pattern: /(?=\\S)[^@;{}()]?(?:[^@;{}()\\s]|\\s+(?!\\s)|#\\{\\$[-\\w]+\\})+(?=\\s*\\{(?:\\}|\\s|[^}][^:{}]*[:{][^}]+))/m,\n    inside: {\n      'parent': {\n        pattern: /&/,\n        alias: 'important'\n      },\n      'placeholder': /%[-\\w]+/,\n      'variable': /\\$[-\\w]+|#\\{\\$[-\\w]+\\}/\n    }\n  },\n  'property': {\n    pattern: /(?:[-\\w]|\\$[-\\w]|#\\{\\$[-\\w]+\\})+(?=\\s*:)/,\n    inside: {\n      'variable': /\\$[-\\w]+|#\\{\\$[-\\w]+\\}/\n    }\n  }\n});\nPrism.languages.insertBefore('scss', 'atrule', {\n  'keyword': [/@(?:if|else(?: if)?|forward|for|each|while|import|use|extend|debug|warn|mixin|include|function|return|content)\\b/i, {\n    pattern: /( +)(?:from|through)(?= )/,\n    lookbehind: true\n  }]\n});\nPrism.languages.insertBefore('scss', 'important', {\n  // var and interpolated vars\n  'variable': /\\$[-\\w]+|#\\{\\$[-\\w]+\\}/\n});\nPrism.languages.insertBefore('scss', 'function', {\n  'module-modifier': {\n    pattern: /\\b(?:as|with|show|hide)\\b/i,\n    alias: 'keyword'\n  },\n  'placeholder': {\n    pattern: /%[-\\w]+/,\n    alias: 'selector'\n  },\n  'statement': {\n    pattern: /\\B!(?:default|optional)\\b/i,\n    alias: 'keyword'\n  },\n  'boolean': /\\b(?:true|false)\\b/,\n  'null': {\n    pattern: /\\bnull\\b/,\n    alias: 'keyword'\n  },\n  'operator': {\n    pattern: /(\\s)(?:[-+*\\/%]|[=!]=|<=?|>=?|and|or|not)(?=\\s)/,\n    lookbehind: true\n  }\n});\nPrism.languages.scss['atrule'].inside.rest = Prism.languages.scss;\n/* \"prismjs/components/prism-sql\" */\n\nPrism.languages.sql = {\n  'comment': {\n    pattern: /(^|[^\\\\])(?:\\/\\*[\\s\\S]*?\\*\\/|(?:--|\\/\\/|#).*)/,\n    lookbehind: true\n  },\n  'variable': [{\n    pattern: /@([\"'`])(?:\\\\[\\s\\S]|(?!\\1)[^\\\\])+\\1/,\n    greedy: true\n  }, /@[\\w.$]+/],\n  'string': {\n    pattern: /(^|[^@\\\\])(\"|')(?:\\\\[\\s\\S]|(?!\\2)[^\\\\]|\\2\\2)*\\2/,\n    greedy: true,\n    lookbehind: true\n  },\n  'function': /\\b(?:AVG|COUNT|FIRST|FORMAT|LAST|LCASE|LEN|MAX|MID|MIN|MOD|NOW|ROUND|SUM|UCASE)(?=\\s*\\()/i,\n  // Should we highlight user defined functions too?\n  'keyword': /\\b(?:ACTION|ADD|AFTER|ALGORITHM|ALL|ALTER|ANALYZE|ANY|APPLY|AS|ASC|AUTHORIZATION|AUTO_INCREMENT|BACKUP|BDB|BEGIN|BERKELEYDB|BIGINT|BINARY|BIT|BLOB|BOOL|BOOLEAN|BREAK|BROWSE|BTREE|BULK|BY|CALL|CASCADED?|CASE|CHAIN|CHAR(?:ACTER|SET)?|CHECK(?:POINT)?|CLOSE|CLUSTERED|COALESCE|COLLATE|COLUMNS?|COMMENT|COMMIT(?:TED)?|COMPUTE|CONNECT|CONSISTENT|CONSTRAINT|CONTAINS(?:TABLE)?|CONTINUE|CONVERT|CREATE|CROSS|CURRENT(?:_DATE|_TIME|_TIMESTAMP|_USER)?|CURSOR|CYCLE|DATA(?:BASES?)?|DATE(?:TIME)?|DAY|DBCC|DEALLOCATE|DEC|DECIMAL|DECLARE|DEFAULT|DEFINER|DELAYED|DELETE|DELIMITERS?|DENY|DESC|DESCRIBE|DETERMINISTIC|DISABLE|DISCARD|DISK|DISTINCT|DISTINCTROW|DISTRIBUTED|DO|DOUBLE|DROP|DUMMY|DUMP(?:FILE)?|DUPLICATE|ELSE(?:IF)?|ENABLE|ENCLOSED|END|ENGINE|ENUM|ERRLVL|ERRORS|ESCAPED?|EXCEPT|EXEC(?:UTE)?|EXISTS|EXIT|EXPLAIN|EXTENDED|FETCH|FIELDS|FILE|FILLFACTOR|FIRST|FIXED|FLOAT|FOLLOWING|FOR(?: EACH ROW)?|FORCE|FOREIGN|FREETEXT(?:TABLE)?|FROM|FULL|FUNCTION|GEOMETRY(?:COLLECTION)?|GLOBAL|GOTO|GRANT|GROUP|HANDLER|HASH|HAVING|HOLDLOCK|HOUR|IDENTITY(?:_INSERT|COL)?|IF|IGNORE|IMPORT|INDEX|INFILE|INNER|INNODB|INOUT|INSERT|INT|INTEGER|INTERSECT|INTERVAL|INTO|INVOKER|ISOLATION|ITERATE|JOIN|KEYS?|KILL|LANGUAGE|LAST|LEAVE|LEFT|LEVEL|LIMIT|LINENO|LINES|LINESTRING|LOAD|LOCAL|LOCK|LONG(?:BLOB|TEXT)|LOOP|MATCH(?:ED)?|MEDIUM(?:BLOB|INT|TEXT)|MERGE|MIDDLEINT|MINUTE|MODE|MODIFIES|MODIFY|MONTH|MULTI(?:LINESTRING|POINT|POLYGON)|NATIONAL|NATURAL|NCHAR|NEXT|NO|NONCLUSTERED|NULLIF|NUMERIC|OFF?|OFFSETS?|ON|OPEN(?:DATASOURCE|QUERY|ROWSET)?|OPTIMIZE|OPTION(?:ALLY)?|ORDER|OUT(?:ER|FILE)?|OVER|PARTIAL|PARTITION|PERCENT|PIVOT|PLAN|POINT|POLYGON|PRECEDING|PRECISION|PREPARE|PREV|PRIMARY|PRINT|PRIVILEGES|PROC(?:EDURE)?|PUBLIC|PURGE|QUICK|RAISERROR|READS?|REAL|RECONFIGURE|REFERENCES|RELEASE|RENAME|REPEAT(?:ABLE)?|REPLACE|REPLICATION|REQUIRE|RESIGNAL|RESTORE|RESTRICT|RETURN(?:S|ING)?|REVOKE|RIGHT|ROLLBACK|ROUTINE|ROW(?:COUNT|GUIDCOL|S)?|RTREE|RULE|SAVE(?:POINT)?|SCHEMA|SECOND|SELECT|SERIAL(?:IZABLE)?|SESSION(?:_USER)?|SET(?:USER)?|SHARE|SHOW|SHUTDOWN|SIMPLE|SMALLINT|SNAPSHOT|SOME|SONAME|SQL|START(?:ING)?|STATISTICS|STATUS|STRIPED|SYSTEM_USER|TABLES?|TABLESPACE|TEMP(?:ORARY|TABLE)?|TERMINATED|TEXT(?:SIZE)?|THEN|TIME(?:STAMP)?|TINY(?:BLOB|INT|TEXT)|TOP?|TRAN(?:SACTIONS?)?|TRIGGER|TRUNCATE|TSEQUAL|TYPES?|UNBOUNDED|UNCOMMITTED|UNDEFINED|UNION|UNIQUE|UNLOCK|UNPIVOT|UNSIGNED|UPDATE(?:TEXT)?|USAGE|USE|USER|USING|VALUES?|VAR(?:BINARY|CHAR|CHARACTER|YING)|VIEW|WAITFOR|WARNINGS|WHEN|WHERE|WHILE|WITH(?: ROLLUP|IN)?|WORK|WRITE(?:TEXT)?|YEAR)\\b/i,\n  'boolean': /\\b(?:TRUE|FALSE|NULL)\\b/i,\n  'number': /\\b0x[\\da-f]+\\b|\\b\\d+(?:\\.\\d*)?|\\B\\.\\d+\\b/i,\n  'operator': /[-+*\\/=%^~]|&&?|\\|\\|?|!=?|<(?:=>?|<|>)?|>[>=]?|\\b(?:AND|BETWEEN|IN|LIKE|NOT|OR|IS|DIV|REGEXP|RLIKE|SOUNDS LIKE|XOR)\\b/i,\n  'punctuation': /[;[\\]()`,.]/\n};\n/* \"prismjs/components/prism-stylus\" */\n\n(function (Prism) {\n  var unit = {\n    pattern: /(\\b\\d+)(?:%|[a-z]+)/,\n    lookbehind: true\n  }; // 123 -123 .123 -.123 12.3 -12.3\n\n  var number = {\n    pattern: /(^|[^\\w.-])-?(?:\\d+(?:\\.\\d+)?|\\.\\d+)/,\n    lookbehind: true\n  };\n  var inside = {\n    'comment': {\n      pattern: /(^|[^\\\\])(?:\\/\\*[\\s\\S]*?\\*\\/|\\/\\/.*)/,\n      lookbehind: true\n    },\n    'url': {\n      pattern: /url\\(([\"']?).*?\\1\\)/i,\n      greedy: true\n    },\n    'string': {\n      pattern: /(\"|')(?:(?!\\1)[^\\\\\\r\\n]|\\\\(?:\\r\\n|[\\s\\S]))*\\1/,\n      greedy: true\n    },\n    'interpolation': null,\n    // See below\n    'func': null,\n    // See below\n    'important': /\\B!(?:important|optional)\\b/i,\n    'keyword': {\n      pattern: /(^|\\s+)(?:(?:if|else|for|return|unless)(?=\\s+|$)|@[\\w-]+)/,\n      lookbehind: true\n    },\n    'hexcode': /#[\\da-f]{3,6}/i,\n    'color': [/\\b(?:AliceBlue|AntiqueWhite|Aqua|Aquamarine|Azure|Beige|Bisque|Black|BlanchedAlmond|Blue|BlueViolet|Brown|BurlyWood|CadetBlue|Chartreuse|Chocolate|Coral|CornflowerBlue|Cornsilk|Crimson|Cyan|DarkBlue|DarkCyan|DarkGoldenRod|DarkGr[ae]y|DarkGreen|DarkKhaki|DarkMagenta|DarkOliveGreen|DarkOrange|DarkOrchid|DarkRed|DarkSalmon|DarkSeaGreen|DarkSlateBlue|DarkSlateGr[ae]y|DarkTurquoise|DarkViolet|DeepPink|DeepSkyBlue|DimGr[ae]y|DodgerBlue|FireBrick|FloralWhite|ForestGreen|Fuchsia|Gainsboro|GhostWhite|Gold|GoldenRod|Gr[ae]y|Green|GreenYellow|HoneyDew|HotPink|IndianRed|Indigo|Ivory|Khaki|Lavender|LavenderBlush|LawnGreen|LemonChiffon|LightBlue|LightCoral|LightCyan|LightGoldenRodYellow|LightGr[ae]y|LightGreen|LightPink|LightSalmon|LightSeaGreen|LightSkyBlue|LightSlateGr[ae]y|LightSteelBlue|LightYellow|Lime|LimeGreen|Linen|Magenta|Maroon|MediumAquaMarine|MediumBlue|MediumOrchid|MediumPurple|MediumSeaGreen|MediumSlateBlue|MediumSpringGreen|MediumTurquoise|MediumVioletRed|MidnightBlue|MintCream|MistyRose|Moccasin|NavajoWhite|Navy|OldLace|Olive|OliveDrab|Orange|OrangeRed|Orchid|PaleGoldenRod|PaleGreen|PaleTurquoise|PaleVioletRed|PapayaWhip|PeachPuff|Peru|Pink|Plum|PowderBlue|Purple|Red|RosyBrown|RoyalBlue|SaddleBrown|Salmon|SandyBrown|SeaGreen|SeaShell|Sienna|Silver|SkyBlue|SlateBlue|SlateGr[ae]y|Snow|SpringGreen|SteelBlue|Tan|Teal|Thistle|Tomato|Transparent|Turquoise|Violet|Wheat|White|WhiteSmoke|Yellow|YellowGreen)\\b/i, {\n      pattern: /\\b(?:rgb|hsl)\\(\\s*\\d{1,3}\\s*,\\s*\\d{1,3}%?\\s*,\\s*\\d{1,3}%?\\s*\\)\\B|\\b(?:rgb|hsl)a\\(\\s*\\d{1,3}\\s*,\\s*\\d{1,3}%?\\s*,\\s*\\d{1,3}%?\\s*,\\s*(?:0|0?\\.\\d+|1)\\s*\\)\\B/i,\n      inside: {\n        'unit': unit,\n        'number': number,\n        'function': /[\\w-]+(?=\\()/,\n        'punctuation': /[(),]/\n      }\n    }],\n    'entity': /\\\\[\\da-f]{1,8}/i,\n    'unit': unit,\n    'boolean': /\\b(?:true|false)\\b/,\n    'operator': [// We want non-word chars around \"-\" because it is\n    // accepted in property names.\n    /~|[+!\\/%<>?=]=?|[-:]=|\\*[*=]?|\\.{2,3}|&&|\\|\\||\\B-\\B|\\b(?:and|in|is(?: a| defined| not|nt)?|not|or)\\b/],\n    'number': number,\n    'punctuation': /[{}()\\[\\];:,]/\n  };\n  inside['interpolation'] = {\n    pattern: /\\{[^\\r\\n}:]+\\}/,\n    alias: 'variable',\n    inside: {\n      'delimiter': {\n        pattern: /^{|}$/,\n        alias: 'punctuation'\n      },\n      rest: inside\n    }\n  };\n  inside['func'] = {\n    pattern: /[\\w-]+\\([^)]*\\).*/,\n    inside: {\n      'function': /^[^(]+/,\n      rest: inside\n    }\n  };\n  Prism.languages.stylus = {\n    'atrule-declaration': {\n      pattern: /(^\\s*)@.+/m,\n      lookbehind: true,\n      inside: {\n        'atrule': /^@[\\w-]+/,\n        rest: inside\n      }\n    },\n    'variable-declaration': {\n      pattern: /(^[ \\t]*)[\\w$-]+\\s*.?=[ \\t]*(?:\\{[^{}]*\\}|\\S.*|$)/m,\n      lookbehind: true,\n      inside: {\n        'variable': /^\\S+/,\n        rest: inside\n      }\n    },\n    'statement': {\n      pattern: /(^[ \\t]*)(?:if|else|for|return|unless)[ \\t].+/m,\n      lookbehind: true,\n      inside: {\n        'keyword': /^\\S+/,\n        rest: inside\n      }\n    },\n    // A property/value pair cannot end with a comma or a brace\n    // It cannot have indented content unless it ended with a semicolon\n    'property-declaration': {\n      pattern: /((?:^|\\{)([ \\t]*))(?:[\\w-]|\\{[^}\\r\\n]+\\})+(?:\\s*:\\s*|[ \\t]+)(?!\\s)[^{\\r\\n]*(?:;|[^{\\r\\n,](?=$)(?!(?:\\r?\\n|\\r)(?:\\{|\\2[ \\t]+)))/m,\n      lookbehind: true,\n      inside: {\n        'property': {\n          pattern: /^[^\\s:]+/,\n          inside: {\n            'interpolation': inside.interpolation\n          }\n        },\n        rest: inside\n      }\n    },\n    // A selector can contain parentheses only as part of a pseudo-element\n    // It can span multiple lines.\n    // It must end with a comma or an accolade or have indented content.\n    'selector': {\n      pattern: /(^[ \\t]*)(?:(?=\\S)(?:[^{}\\r\\n:()]|::?[\\w-]+(?:\\([^)\\r\\n]*\\)|(?![\\w-]))|\\{[^}\\r\\n]+\\})+)(?:(?:\\r?\\n|\\r)(?:\\1(?:(?=\\S)(?:[^{}\\r\\n:()]|::?[\\w-]+(?:\\([^)\\r\\n]*\\)|(?![\\w-]))|\\{[^}\\r\\n]+\\})+)))*(?:,$|\\{|(?=(?:\\r?\\n|\\r)(?:\\{|\\1[ \\t]+)))/m,\n      lookbehind: true,\n      inside: {\n        'interpolation': inside.interpolation,\n        'comment': inside.comment,\n        'punctuation': /[{},]/\n      }\n    },\n    'func': inside.func,\n    'string': inside.string,\n    'comment': {\n      pattern: /(^|[^\\\\])(?:\\/\\*[\\s\\S]*?\\*\\/|\\/\\/.*)/,\n      lookbehind: true,\n      greedy: true\n    },\n    'interpolation': inside.interpolation,\n    'punctuation': /[{}()\\[\\];:.]/\n  };\n})(Prism);\n/* \"prismjs/components/prism-typescript\" */\n\n\n(function (Prism) {\n  Prism.languages.typescript = Prism.languages.extend('javascript', {\n    'class-name': {\n      pattern: /(\\b(?:class|extends|implements|instanceof|interface|new|type)\\s+)(?!keyof\\b)(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*(?:\\s*<(?:[^<>]|<(?:[^<>]|<[^<>]*>)*>)*>)?/,\n      lookbehind: true,\n      greedy: true,\n      inside: null // see below\n\n    },\n    // From JavaScript Prism keyword list and TypeScript language spec: https://github.com/Microsoft/TypeScript/blob/master/doc/spec.md#221-reserved-words\n    'keyword': /\\b(?:abstract|as|asserts|async|await|break|case|catch|class|const|constructor|continue|debugger|declare|default|delete|do|else|enum|export|extends|finally|for|from|function|get|if|implements|import|in|instanceof|interface|is|keyof|let|module|namespace|new|null|of|package|private|protected|public|readonly|return|require|set|static|super|switch|this|throw|try|type|typeof|undefined|var|void|while|with|yield)\\b/,\n    'builtin': /\\b(?:string|Function|any|number|boolean|Array|symbol|console|Promise|unknown|never)\\b/\n  }); // doesn't work with TS because TS is too complex\n\n  delete Prism.languages.typescript['parameter']; // a version of typescript specifically for highlighting types\n\n  var typeInside = Prism.languages.extend('typescript', {});\n  delete typeInside['class-name'];\n  Prism.languages.typescript['class-name'].inside = typeInside;\n  Prism.languages.insertBefore('typescript', 'function', {\n    'generic-function': {\n      // e.g. foo<T extends \"bar\" | \"baz\">( ...\n      pattern: /#?(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*\\s*<(?:[^<>]|<(?:[^<>]|<[^<>]*>)*>)*>(?=\\s*\\()/,\n      greedy: true,\n      inside: {\n        'function': /^#?(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*/,\n        'generic': {\n          pattern: /<[\\s\\S]+/,\n          // everything after the first <\n          alias: 'class-name',\n          inside: typeInside\n        }\n      }\n    }\n  });\n  Prism.languages.ts = Prism.languages.typescript;\n})(Prism);\n/* \"prismjs/components/prism-tsx\" */\n\n\n(function (Prism) {\n  var typescript = Prism.util.clone(Prism.languages.typescript);\n  Prism.languages.tsx = Prism.languages.extend('jsx', typescript); // This will prevent collisions between TSX tags and TS generic types.\n  // Idea by https://github.com/karlhorky\n  // Discussion: https://github.com/PrismJS/prism/issues/2594#issuecomment-710666928\n\n  var tag = Prism.languages.tsx.tag;\n  tag.pattern = RegExp(/(^|[^\\w$]|(?=<\\/))/.source + '(?:' + tag.pattern.source + ')', tag.pattern.flags);\n  tag.lookbehind = true;\n})(Prism);\n/* \"prismjs/components/prism-wasm\" */\n\n\nPrism.languages.wasm = {\n  'comment': [/\\(;[\\s\\S]*?;\\)/, {\n    pattern: /;;.*/,\n    greedy: true\n  }],\n  'string': {\n    pattern: /\"(?:\\\\[\\s\\S]|[^\"\\\\])*\"/,\n    greedy: true\n  },\n  'keyword': [{\n    pattern: /\\b(?:align|offset)=/,\n    inside: {\n      'operator': /=/\n    }\n  }, {\n    pattern: /\\b(?:(?:f32|f64|i32|i64)(?:\\.(?:abs|add|and|ceil|clz|const|convert_[su]\\/i(?:32|64)|copysign|ctz|demote\\/f64|div(?:_[su])?|eqz?|extend_[su]\\/i32|floor|ge(?:_[su])?|gt(?:_[su])?|le(?:_[su])?|load(?:(?:8|16|32)_[su])?|lt(?:_[su])?|max|min|mul|nearest|neg?|or|popcnt|promote\\/f32|reinterpret\\/[fi](?:32|64)|rem_[su]|rot[lr]|shl|shr_[su]|store(?:8|16|32)?|sqrt|sub|trunc(?:_[su]\\/f(?:32|64))?|wrap\\/i64|xor))?|memory\\.(?:grow|size))\\b/,\n    inside: {\n      'punctuation': /\\./\n    }\n  }, /\\b(?:anyfunc|block|br(?:_if|_table)?|call(?:_indirect)?|data|drop|elem|else|end|export|func|get_(?:global|local)|global|if|import|local|loop|memory|module|mut|nop|offset|param|result|return|select|set_(?:global|local)|start|table|tee_local|then|type|unreachable)\\b/],\n  'variable': /\\$[\\w!#$%&'*+\\-./:<=>?@\\\\^_`|~]+/i,\n  'number': /[+-]?\\b(?:\\d(?:_?\\d)*(?:\\.\\d(?:_?\\d)*)?(?:[eE][+-]?\\d(?:_?\\d)*)?|0x[\\da-fA-F](?:_?[\\da-fA-F])*(?:\\.[\\da-fA-F](?:_?[\\da-fA-D])*)?(?:[pP][+-]?\\d(?:_?\\d)*)?)\\b|\\binf\\b|\\bnan(?::0x[\\da-fA-F](?:_?[\\da-fA-D])*)?\\b/,\n  'punctuation': /[()]/\n};\n/* \"prismjs/components/prism-yaml\" */\n\n(function (Prism) {\n  // https://yaml.org/spec/1.2/spec.html#c-ns-anchor-property\n  // https://yaml.org/spec/1.2/spec.html#c-ns-alias-node\n  var anchorOrAlias = /[*&][^\\s[\\]{},]+/; // https://yaml.org/spec/1.2/spec.html#c-ns-tag-property\n\n  var tag = /!(?:<[\\w\\-%#;/?:@&=+$,.!~*'()[\\]]+>|(?:[a-zA-Z\\d-]*!)?[\\w\\-%#;/?:@&=+$.~*'()]+)?/; // https://yaml.org/spec/1.2/spec.html#c-ns-properties(n,c)\n\n  var properties = '(?:' + tag.source + '(?:[ \\t]+' + anchorOrAlias.source + ')?|' + anchorOrAlias.source + '(?:[ \\t]+' + tag.source + ')?)'; // https://yaml.org/spec/1.2/spec.html#ns-plain(n,c)\n  // This is a simplified version that doesn't support \"#\" and multiline keys\n  // All these long scarry character classes are simplified versions of YAML's characters\n\n  var plainKey = /(?:[^\\s\\x00-\\x08\\x0e-\\x1f!\"#%&'*,\\-:>?@[\\]`{|}\\x7f-\\x84\\x86-\\x9f\\ud800-\\udfff\\ufffe\\uffff]|[?:-]<PLAIN>)(?:[ \\t]*(?:(?![#:])<PLAIN>|:<PLAIN>))*/.source.replace(/<PLAIN>/g, function () {\n    return /[^\\s\\x00-\\x08\\x0e-\\x1f,[\\]{}\\x7f-\\x84\\x86-\\x9f\\ud800-\\udfff\\ufffe\\uffff]/.source;\n  });\n  var string = /\"(?:[^\"\\\\\\r\\n]|\\\\.)*\"|'(?:[^'\\\\\\r\\n]|\\\\.)*'/.source;\n  /**\n   *\n   * @param {string} value\n   * @param {string} [flags]\n   * @returns {RegExp}\n   */\n\n  function createValuePattern(value, flags) {\n    flags = (flags || '').replace(/m/g, '') + 'm'; // add m flag\n\n    var pattern = /([:\\-,[{]\\s*(?:\\s<<prop>>[ \\t]+)?)(?:<<value>>)(?=[ \\t]*(?:$|,|]|}|(?:[\\r\\n]\\s*)?#))/.source.replace(/<<prop>>/g, function () {\n      return properties;\n    }).replace(/<<value>>/g, function () {\n      return value;\n    });\n    return RegExp(pattern, flags);\n  }\n\n  Prism.languages.yaml = {\n    'scalar': {\n      pattern: RegExp(/([\\-:]\\s*(?:\\s<<prop>>[ \\t]+)?[|>])[ \\t]*(?:((?:\\r?\\n|\\r)[ \\t]+)\\S[^\\r\\n]*(?:\\2[^\\r\\n]+)*)/.source.replace(/<<prop>>/g, function () {\n        return properties;\n      })),\n      lookbehind: true,\n      alias: 'string'\n    },\n    'comment': /#.*/,\n    'key': {\n      pattern: RegExp(/((?:^|[:\\-,[{\\r\\n?])[ \\t]*(?:<<prop>>[ \\t]+)?)<<key>>(?=\\s*:\\s)/.source.replace(/<<prop>>/g, function () {\n        return properties;\n      }).replace(/<<key>>/g, function () {\n        return '(?:' + plainKey + '|' + string + ')';\n      })),\n      lookbehind: true,\n      greedy: true,\n      alias: 'atrule'\n    },\n    'directive': {\n      pattern: /(^[ \\t]*)%.+/m,\n      lookbehind: true,\n      alias: 'important'\n    },\n    'datetime': {\n      pattern: createValuePattern(/\\d{4}-\\d\\d?-\\d\\d?(?:[tT]|[ \\t]+)\\d\\d?:\\d{2}:\\d{2}(?:\\.\\d*)?(?:[ \\t]*(?:Z|[-+]\\d\\d?(?::\\d{2})?))?|\\d{4}-\\d{2}-\\d{2}|\\d\\d?:\\d{2}(?::\\d{2}(?:\\.\\d*)?)?/.source),\n      lookbehind: true,\n      alias: 'number'\n    },\n    'boolean': {\n      pattern: createValuePattern(/true|false/.source, 'i'),\n      lookbehind: true,\n      alias: 'important'\n    },\n    'null': {\n      pattern: createValuePattern(/null|~/.source, 'i'),\n      lookbehind: true,\n      alias: 'important'\n    },\n    'string': {\n      pattern: createValuePattern(string),\n      lookbehind: true,\n      greedy: true\n    },\n    'number': {\n      pattern: createValuePattern(/[+-]?(?:0x[\\da-f]+|0o[0-7]+|(?:\\d+(?:\\.\\d*)?|\\.?\\d+)(?:e[+-]?\\d+)?|\\.inf|\\.nan)/.source, 'i'),\n      lookbehind: true\n    },\n    'tag': tag,\n    'important': anchorOrAlias,\n    'punctuation': /---|[:[\\]{}\\-,|>?]|\\.\\.\\./\n  };\n  Prism.languages.yml = Prism.languages.yaml;\n})(Prism);\n\nexport default Prism;\n","import Prism from '../prism/index.js';\nexport { default as Prism } from '../prism/index.js';\nimport theme from '../themes/duotoneDark';\nimport { Component } from 'react';\n\nvar defaultProps = {\n  // $FlowFixMe\n  Prism: Prism,\n  theme: theme\n};\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nvar newlineRe = /\\r\\n|\\r|\\n/; // Empty lines need to contain a single empty token, denoted with { empty: true }\n\nvar normalizeEmptyLines = function (line) {\n  if (line.length === 0) {\n    line.push({\n      types: [\"plain\"],\n      content: \"\\n\",\n      empty: true\n    });\n  } else if (line.length === 1 && line[0].content === \"\") {\n    line[0].content = \"\\n\";\n    line[0].empty = true;\n  }\n};\n\nvar appendTypes = function (types, add) {\n  var typesSize = types.length;\n\n  if (typesSize > 0 && types[typesSize - 1] === add) {\n    return types;\n  }\n\n  return types.concat(add);\n}; // Takes an array of Prism's tokens and groups them by line, turning plain\n// strings into tokens as well. Tokens can become recursive in some cases,\n// which means that their types are concatenated. Plain-string tokens however\n// are always of type \"plain\".\n// This is not recursive to avoid exceeding the call-stack limit, since it's unclear\n// how nested Prism's tokens can become\n\n\nvar normalizeTokens = function (tokens) {\n  var typeArrStack = [[]];\n  var tokenArrStack = [tokens];\n  var tokenArrIndexStack = [0];\n  var tokenArrSizeStack = [tokens.length];\n  var i = 0;\n  var stackIndex = 0;\n  var currentLine = [];\n  var acc = [currentLine];\n\n  while (stackIndex > -1) {\n    while ((i = tokenArrIndexStack[stackIndex]++) < tokenArrSizeStack[stackIndex]) {\n      var content = void 0;\n      var types = typeArrStack[stackIndex];\n      var tokenArr = tokenArrStack[stackIndex];\n      var token = tokenArr[i]; // Determine content and append type to types if necessary\n\n      if (typeof token === \"string\") {\n        types = stackIndex > 0 ? types : [\"plain\"];\n        content = token;\n      } else {\n        types = appendTypes(types, token.type);\n\n        if (token.alias) {\n          types = appendTypes(types, token.alias);\n        }\n\n        content = token.content;\n      } // If token.content is an array, increase the stack depth and repeat this while-loop\n\n\n      if (typeof content !== \"string\") {\n        stackIndex++;\n        typeArrStack.push(types);\n        tokenArrStack.push(content);\n        tokenArrIndexStack.push(0);\n        tokenArrSizeStack.push(content.length);\n        continue;\n      } // Split by newlines\n\n\n      var splitByNewlines = content.split(newlineRe);\n      var newlineCount = splitByNewlines.length;\n      currentLine.push({\n        types: types,\n        content: splitByNewlines[0]\n      }); // Create a new line for each string on a new line\n\n      for (var i$1 = 1; i$1 < newlineCount; i$1++) {\n        normalizeEmptyLines(currentLine);\n        acc.push(currentLine = []);\n        currentLine.push({\n          types: types,\n          content: splitByNewlines[i$1]\n        });\n      }\n    } // Decreate the stack depth\n\n\n    stackIndex--;\n    typeArrStack.pop();\n    tokenArrStack.pop();\n    tokenArrIndexStack.pop();\n    tokenArrSizeStack.pop();\n  }\n\n  normalizeEmptyLines(currentLine);\n  return acc;\n};\n\nvar themeToDict = function (theme, language) {\n  var plain = theme.plain; // $FlowFixMe\n\n  var base = Object.create(null);\n  var themeDict = theme.styles.reduce(function (acc, themeEntry) {\n    var languages = themeEntry.languages;\n    var style = themeEntry.style;\n\n    if (languages && !languages.includes(language)) {\n      return acc;\n    }\n\n    themeEntry.types.forEach(function (type) {\n      // $FlowFixMe\n      var accStyle = _extends({}, acc[type], style);\n\n      acc[type] = accStyle;\n    });\n    return acc;\n  }, base); // $FlowFixMe\n\n  themeDict.root = plain; // $FlowFixMe\n\n  themeDict.plain = _extends({}, plain, {\n    backgroundColor: null\n  });\n  return themeDict;\n};\n\nfunction objectWithoutProperties(obj, exclude) {\n  var target = {};\n\n  for (var k in obj) if (Object.prototype.hasOwnProperty.call(obj, k) && exclude.indexOf(k) === -1) target[k] = obj[k];\n\n  return target;\n}\n\nvar Highlight = /*@__PURE__*/function (Component) {\n  function Highlight() {\n    var this$1 = this;\n    var args = [],\n        len = arguments.length;\n\n    while (len--) args[len] = arguments[len];\n\n    Component.apply(this, args);\n\n    _defineProperty(this, \"getThemeDict\", function (props) {\n      if (this$1.themeDict !== undefined && props.theme === this$1.prevTheme && props.language === this$1.prevLanguage) {\n        return this$1.themeDict;\n      }\n\n      this$1.prevTheme = props.theme;\n      this$1.prevLanguage = props.language;\n      var themeDict = props.theme ? themeToDict(props.theme, props.language) : undefined;\n      return this$1.themeDict = themeDict;\n    });\n\n    _defineProperty(this, \"getLineProps\", function (ref) {\n      var key = ref.key;\n      var className = ref.className;\n      var style = ref.style;\n      var rest$1 = objectWithoutProperties(ref, [\"key\", \"className\", \"style\", \"line\"]);\n      var rest = rest$1;\n\n      var output = _extends({}, rest, {\n        className: \"token-line\",\n        style: undefined,\n        key: undefined\n      });\n\n      var themeDict = this$1.getThemeDict(this$1.props);\n\n      if (themeDict !== undefined) {\n        output.style = themeDict.plain;\n      }\n\n      if (style !== undefined) {\n        output.style = output.style !== undefined ? _extends({}, output.style, style) : style;\n      }\n\n      if (key !== undefined) {\n        output.key = key;\n      }\n\n      if (className) {\n        output.className += \" \" + className;\n      }\n\n      return output;\n    });\n\n    _defineProperty(this, \"getStyleForToken\", function (ref) {\n      var types = ref.types;\n      var empty = ref.empty;\n      var typesSize = types.length;\n      var themeDict = this$1.getThemeDict(this$1.props);\n\n      if (themeDict === undefined) {\n        return undefined;\n      } else if (typesSize === 1 && types[0] === \"plain\") {\n        return empty ? {\n          display: \"inline-block\"\n        } : undefined;\n      } else if (typesSize === 1 && !empty) {\n        return themeDict[types[0]];\n      }\n\n      var baseStyle = empty ? {\n        display: \"inline-block\"\n      } : {}; // $FlowFixMe\n\n      var typeStyles = types.map(function (type) {\n        return themeDict[type];\n      });\n      return Object.assign.apply(Object, [baseStyle].concat(typeStyles));\n    });\n\n    _defineProperty(this, \"getTokenProps\", function (ref) {\n      var key = ref.key;\n      var className = ref.className;\n      var style = ref.style;\n      var token = ref.token;\n      var rest$1 = objectWithoutProperties(ref, [\"key\", \"className\", \"style\", \"token\"]);\n      var rest = rest$1;\n\n      var output = _extends({}, rest, {\n        className: \"token \" + token.types.join(\" \"),\n        children: token.content,\n        style: this$1.getStyleForToken(token),\n        key: undefined\n      });\n\n      if (style !== undefined) {\n        output.style = output.style !== undefined ? _extends({}, output.style, style) : style;\n      }\n\n      if (key !== undefined) {\n        output.key = key;\n      }\n\n      if (className) {\n        output.className += \" \" + className;\n      }\n\n      return output;\n    });\n\n    _defineProperty(this, \"tokenize\", function (Prism, code, grammar, language) {\n      var env = {\n        code: code,\n        grammar: grammar,\n        language: language,\n        tokens: []\n      };\n      Prism.hooks.run(\"before-tokenize\", env);\n      var tokens = env.tokens = Prism.tokenize(env.code, env.grammar, env.language);\n      Prism.hooks.run(\"after-tokenize\", env);\n      return tokens;\n    });\n  }\n\n  if (Component) Highlight.__proto__ = Component;\n  Highlight.prototype = Object.create(Component && Component.prototype);\n  Highlight.prototype.constructor = Highlight;\n\n  Highlight.prototype.render = function render() {\n    var ref = this.props;\n    var Prism = ref.Prism;\n    var language = ref.language;\n    var code = ref.code;\n    var children = ref.children;\n    var themeDict = this.getThemeDict(this.props);\n    var grammar = Prism.languages[language];\n    var mixedTokens = grammar !== undefined ? this.tokenize(Prism, code, grammar, language) : [code];\n    var tokens = normalizeTokens(mixedTokens);\n    return children({\n      tokens: tokens,\n      className: \"prism-code language-\" + language,\n      style: themeDict !== undefined ? themeDict.root : {},\n      getLineProps: this.getLineProps,\n      getTokenProps: this.getTokenProps\n    });\n  };\n\n  return Highlight;\n}(Component);\n\nexport default Highlight;\nexport { defaultProps };\n","export const registerLanguage = (Prism) => {\n    // Copied from https://raw.githubusercontent.com/PrismJS/prism/master/components/prism-java.js\n    (function (Prism) {\n        var keywords =\n            /\\b(?:abstract|assert|boolean|break|byte|case|catch|char|class|const|continue|default|do|double|else|enum|exports|extends|final|finally|float|for|goto|if|implements|import|instanceof|int|interface|long|module|native|new|non-sealed|null|open|opens|package|permits|private|protected|provides|public|record|requires|return|sealed|short|static|strictfp|super|switch|synchronized|this|throw|throws|to|transient|transitive|try|uses|var|void|volatile|while|with|yield)\\b/;\n\n        // full package (optional) + parent classes (optional)\n        var classNamePrefix = /(^|[^\\w.])(?:[a-z]\\w*\\s*\\.\\s*)*(?:[A-Z]\\w*\\s*\\.\\s*)*/.source;\n\n        // based on the java naming conventions\n        var className = {\n            pattern: RegExp(classNamePrefix + /[A-Z](?:[\\d_A-Z]*[a-z]\\w*)?\\b/.source),\n            lookbehind: true,\n            inside: {\n                namespace: {\n                    pattern: /^[a-z]\\w*(?:\\s*\\.\\s*[a-z]\\w*)*(?:\\s*\\.)?/,\n                    inside: {\n                        punctuation: /\\./,\n                    },\n                },\n                punctuation: /\\./,\n            },\n        };\n\n        Prism.languages.java = Prism.languages.extend(\"clike\", {\n            \"class-name\": [\n                className,\n                {\n                    // variables and parameters\n                    // this to support class names (or generic parameters) which do not contain a lower case letter (also works for methods)\n                    pattern: RegExp(classNamePrefix + /[A-Z]\\w*(?=\\s+\\w+\\s*[;,=()])/.source),\n                    lookbehind: true,\n                    inside: className.inside,\n                },\n            ],\n            keyword: keywords,\n            function: [\n                Prism.languages.clike.function,\n                {\n                    pattern: /(::\\s*)[a-z_]\\w*/,\n                    lookbehind: true,\n                },\n            ],\n            number: /\\b0b[01][01_]*L?\\b|\\b0x(?:\\.[\\da-f_p+-]+|[\\da-f_]+(?:\\.[\\da-f_p+-]+)?)\\b|(?:\\b\\d[\\d_]*(?:\\.[\\d_]*)?|\\B\\.\\d[\\d_]*)(?:e[+-]?\\d[\\d_]*)?[dfl]?/i,\n            operator: {\n                pattern: /(^|[^.])(?:<<=?|>>>?=?|->|--|\\+\\+|&&|\\|\\||::|[?:~]|[-+*/%&|^!=<>]=?)/m,\n                lookbehind: true,\n            },\n        });\n\n        Prism.languages.insertBefore(\"java\", \"string\", {\n            \"triple-quoted-string\": {\n                // http://openjdk.java.net/jeps/355#Description\n                pattern: /\"\"\"[ \\t]*[\\r\\n](?:(?:\"|\"\")?(?:\\\\.|[^\"\\\\]))*\"\"\"/,\n                greedy: true,\n                alias: \"string\",\n            },\n        });\n\n        Prism.languages.insertBefore(\"java\", \"class-name\", {\n            annotation: {\n                pattern: /(^|[^.])@\\w+(?:\\s*\\.\\s*\\w+)*/,\n                lookbehind: true,\n                alias: \"punctuation\",\n            },\n            generics: {\n                pattern:\n                    /<(?:[\\w\\s,.?]|&(?!&)|<(?:[\\w\\s,.?]|&(?!&)|<(?:[\\w\\s,.?]|&(?!&)|<(?:[\\w\\s,.?]|&(?!&))*>)*>)*>)*>/,\n                inside: {\n                    \"class-name\": className,\n                    keyword: keywords,\n                    punctuation: /[<>(),.:]/,\n                    operator: /[?&|]/,\n                },\n            },\n            namespace: {\n                pattern: RegExp(\n                    /(\\b(?:exports|import(?:\\s+static)?|module|open|opens|package|provides|requires|to|transitive|uses|with)\\s+)(?!<keyword>)[a-z]\\w*(?:\\.[a-z]\\w*)*\\.?/.source.replace(\n                        /<keyword>/g,\n                        function () {\n                            return keywords.source;\n                        }\n                    )\n                ),\n                lookbehind: true,\n                inside: {\n                    punctuation: /\\./,\n                },\n            },\n        });\n    })(Prism);\n};\n","import React from \"react\";\nimport PrismReactRenderer, { Prism, Language } from \"prism-react-renderer\";\n\nimport { registerLanguage as registerJava } from \"./prismjs-components/prism-java\";\nimport { registerLanguage as registerCSharp } from \"./prismjs-components/prism-csharp\";\nimport { registerLanguage as registerScala } from \"./prismjs-components/prism-scala\";\nimport { registerLanguage as registerRuby } from \"./prismjs-components/prism-ruby\";\nimport { registerLanguage as registerHttp } from \"./prismjs-components/prism-http\";\n\nregisterJava(Prism);\nregisterCSharp(Prism);\nregisterScala(Prism);\nregisterRuby(Prism);\nregisterHttp(Prism);\n\nimport { CommonAndHTMLProps } from \"../Element/constants\";\nimport { Element } from \"../Element/Element\";\nimport { CodeStyled } from \"./Code.styled\";\n\n// prettier-ignore\nexport interface CodeBlockCustomProps {\n    source   ? : object | string;\n    language ? : Language;\n}\n\nexport type CodeBlockElementType = HTMLPreElement;\nexport type CodeBlockProps = Omit<CommonAndHTMLProps<CodeBlockElementType>, keyof CodeBlockCustomProps> &\n    CodeBlockCustomProps;\n\nexport const CodeBlock = React.forwardRef(\n    ({ source, ...props }: CodeBlockProps, ref: React.Ref<CodeBlockElementType>) => {\n        return (\n            <Element<CodeBlockElementType> as={CodeStyled} ref={ref} {...props}>\n                <PrismReactRenderer\n                    code={typeof source === \"object\" ? JSON.stringify(source, null, 2) : source}\n                    language=\"json\"\n                    {...props}\n                    Prism={Prism}\n                    theme={undefined}\n                >\n                    {({ className, style, tokens, getLineProps, getTokenProps }) => (\n                        <pre ref={ref} className={className} style={style}>\n                            {tokens.map((line, i) => (\n                                <div {...getLineProps({ line, key: i })}>\n                                    {line.map((token, key) => (\n                                        <span {...getTokenProps({ token, key })} />\n                                    ))}\n                                </div>\n                            ))}\n                        </pre>\n                    )}\n                </PrismReactRenderer>\n            </Element>\n        );\n    }\n);\n","export const registerLanguage = (Prism) => {\n    // Copied from https://raw.githubusercontent.com/PrismJS/prism/master/components/prism-csharp.js\n    (function (Prism) {\n        /**\n         * Replaces all placeholders \"<<n>>\" of given pattern with the n-th replacement (zero based).\n         *\n         * Note: This is a simple text based replacement. Be careful when using backreferences!\n         *\n         * @param {string} pattern the given pattern.\n         * @param {string[]} replacements a list of replacement which can be inserted into the given pattern.\n         * @returns {string} the pattern with all placeholders replaced with their corresponding replacements.\n         * @example replace(/a<<0>>a/.source, [/b+/.source]) === /a(?:b+)a/.source\n         */\n        function replace(pattern, replacements) {\n            return pattern.replace(/<<(\\d+)>>/g, function (m, index) {\n                return \"(?:\" + replacements[+index] + \")\";\n            });\n        }\n        /**\n         * @param {string} pattern\n         * @param {string[]} replacements\n         * @param {string} [flags]\n         * @returns {RegExp}\n         */\n        function re(pattern, replacements, flags) {\n            return RegExp(replace(pattern, replacements), flags || \"\");\n        }\n\n        /**\n         * Creates a nested pattern where all occurrences of the string `<<self>>` are replaced with the pattern itself.\n         *\n         * @param {string} pattern\n         * @param {number} depthLog2\n         * @returns {string}\n         */\n        function nested(pattern, depthLog2) {\n            for (var i = 0; i < depthLog2; i++) {\n                pattern = pattern.replace(/<<self>>/g, function () {\n                    return \"(?:\" + pattern + \")\";\n                });\n            }\n            return pattern.replace(/<<self>>/g, \"[^\\\\s\\\\S]\");\n        }\n\n        // https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/keywords/\n        var keywordKinds = {\n            // keywords which represent a return or variable type\n            type: \"bool byte char decimal double dynamic float int long object sbyte short string uint ulong ushort var void\",\n            // keywords which are used to declare a type\n            typeDeclaration: \"class enum interface record struct\",\n            // contextual keywords\n            // (\"var\" and \"dynamic\" are missing because they are used like types)\n            contextual:\n                \"add alias and ascending async await by descending from(?=\\\\s*(?:\\\\w|$)) get global group into init(?=\\\\s*;) join let nameof not notnull on or orderby partial remove select set unmanaged value when where with(?=\\\\s*{)\",\n            // all other keywords\n            other: \"abstract as base break case catch checked const continue default delegate do else event explicit extern finally fixed for foreach goto if implicit in internal is lock namespace new null operator out override params private protected public readonly ref return sealed sizeof stackalloc static switch this throw try typeof unchecked unsafe using virtual volatile while yield\",\n        };\n\n        // keywords\n        function keywordsToPattern(words) {\n            return \"\\\\b(?:\" + words.trim().replace(/ /g, \"|\") + \")\\\\b\";\n        }\n        var typeDeclarationKeywords = keywordsToPattern(keywordKinds.typeDeclaration);\n        var keywords = RegExp(\n            keywordsToPattern(\n                keywordKinds.type +\n                    \" \" +\n                    keywordKinds.typeDeclaration +\n                    \" \" +\n                    keywordKinds.contextual +\n                    \" \" +\n                    keywordKinds.other\n            )\n        );\n        var nonTypeKeywords = keywordsToPattern(\n            keywordKinds.typeDeclaration + \" \" + keywordKinds.contextual + \" \" + keywordKinds.other\n        );\n        var nonContextualKeywords = keywordsToPattern(\n            keywordKinds.type + \" \" + keywordKinds.typeDeclaration + \" \" + keywordKinds.other\n        );\n\n        // types\n        var generic = nested(/<(?:[^<>;=+\\-*/%&|^]|<<self>>)*>/.source, 2); // the idea behind the other forbidden characters is to prevent false positives. Same for tupleElement.\n        var nestedRound = nested(/\\((?:[^()]|<<self>>)*\\)/.source, 2);\n        var name = /@?\\b[A-Za-z_]\\w*\\b/.source;\n        var genericName = replace(/<<0>>(?:\\s*<<1>>)?/.source, [name, generic]);\n        var identifier = replace(/(?!<<0>>)<<1>>(?:\\s*\\.\\s*<<1>>)*/.source, [nonTypeKeywords, genericName]);\n        var array = /\\[\\s*(?:,\\s*)*\\]/.source;\n        var typeExpressionWithoutTuple = replace(/<<0>>(?:\\s*(?:\\?\\s*)?<<1>>)*(?:\\s*\\?)?/.source, [identifier, array]);\n        var tupleElement = replace(/[^,()<>[\\];=+\\-*/%&|^]|<<0>>|<<1>>|<<2>>/.source, [generic, nestedRound, array]);\n        var tuple = replace(/\\(<<0>>+(?:,<<0>>+)+\\)/.source, [tupleElement]);\n        var typeExpression = replace(/(?:<<0>>|<<1>>)(?:\\s*(?:\\?\\s*)?<<2>>)*(?:\\s*\\?)?/.source, [\n            tuple,\n            identifier,\n            array,\n        ]);\n\n        var typeInside = {\n            keyword: keywords,\n            punctuation: /[<>()?,.:[\\]]/,\n        };\n\n        // strings & characters\n        // https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/language-specification/lexical-structure#character-literals\n        // https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/language-specification/lexical-structure#string-literals\n        var character = /'(?:[^\\r\\n'\\\\]|\\\\.|\\\\[Uux][\\da-fA-F]{1,8})'/.source; // simplified pattern\n        var regularString = /\"(?:\\\\.|[^\\\\\"\\r\\n])*\"/.source;\n        var verbatimString = /@\"(?:\"\"|\\\\[\\s\\S]|[^\\\\\"])*\"(?!\")/.source;\n\n        Prism.languages.csharp = Prism.languages.extend(\"clike\", {\n            string: [\n                {\n                    pattern: re(/(^|[^$\\\\])<<0>>/.source, [verbatimString]),\n                    lookbehind: true,\n                    greedy: true,\n                },\n                {\n                    pattern: re(/(^|[^@$\\\\])<<0>>/.source, [regularString]),\n                    lookbehind: true,\n                    greedy: true,\n                },\n                {\n                    pattern: RegExp(character),\n                    greedy: true,\n                    alias: \"character\",\n                },\n            ],\n            \"class-name\": [\n                {\n                    // Using static\n                    // using static System.Math;\n                    pattern: re(/(\\busing\\s+static\\s+)<<0>>(?=\\s*;)/.source, [identifier]),\n                    lookbehind: true,\n                    inside: typeInside,\n                },\n                {\n                    // Using alias (type)\n                    // using Project = PC.MyCompany.Project;\n                    pattern: re(/(\\busing\\s+<<0>>\\s*=\\s*)<<1>>(?=\\s*;)/.source, [name, typeExpression]),\n                    lookbehind: true,\n                    inside: typeInside,\n                },\n                {\n                    // Using alias (alias)\n                    // using Project = PC.MyCompany.Project;\n                    pattern: re(/(\\busing\\s+)<<0>>(?=\\s*=)/.source, [name]),\n                    lookbehind: true,\n                },\n                {\n                    // Type declarations\n                    // class Foo<A, B>\n                    // interface Foo<out A, B>\n                    pattern: re(/(\\b<<0>>\\s+)<<1>>/.source, [typeDeclarationKeywords, genericName]),\n                    lookbehind: true,\n                    inside: typeInside,\n                },\n                {\n                    // Single catch exception declaration\n                    // catch(Foo)\n                    // (things like catch(Foo e) is covered by variable declaration)\n                    pattern: re(/(\\bcatch\\s*\\(\\s*)<<0>>/.source, [identifier]),\n                    lookbehind: true,\n                    inside: typeInside,\n                },\n                {\n                    // Name of the type parameter of generic constraints\n                    // where Foo : class\n                    pattern: re(/(\\bwhere\\s+)<<0>>/.source, [name]),\n                    lookbehind: true,\n                },\n                {\n                    // Casts and checks via as and is.\n                    // as Foo<A>, is Bar<B>\n                    // (things like if(a is Foo b) is covered by variable declaration)\n                    pattern: re(/(\\b(?:is(?:\\s+not)?|as)\\s+)<<0>>/.source, [typeExpressionWithoutTuple]),\n                    lookbehind: true,\n                    inside: typeInside,\n                },\n                {\n                    // Variable, field and parameter declaration\n                    // (Foo bar, Bar baz, Foo[,,] bay, Foo<Bar, FooBar<Bar>> bax)\n                    pattern: re(/\\b<<0>>(?=\\s+(?!<<1>>|with\\s*\\{)<<2>>(?:\\s*[=,;:{)\\]]|\\s+(?:in|when)\\b))/.source, [\n                        typeExpression,\n                        nonContextualKeywords,\n                        name,\n                    ]),\n                    inside: typeInside,\n                },\n            ],\n            keyword: keywords,\n            // https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/language-specification/lexical-structure#literals\n            number: /(?:\\b0(?:x[\\da-f_]*[\\da-f]|b[01_]*[01])|(?:\\B\\.\\d+(?:_+\\d+)*|\\b\\d+(?:_+\\d+)*(?:\\.\\d+(?:_+\\d+)*)?)(?:e[-+]?\\d+(?:_+\\d+)*)?)(?:ul|lu|[dflmu])?\\b/i,\n            operator: />>=?|<<=?|[-=]>|([-+&|])\\1|~|\\?\\?=?|[-+*/%&|^!=<>]=?/,\n            punctuation: /\\?\\.?|::|[{}[\\];(),.:]/,\n        });\n\n        Prism.languages.insertBefore(\"csharp\", \"number\", {\n            range: {\n                pattern: /\\.\\./,\n                alias: \"operator\",\n            },\n        });\n\n        Prism.languages.insertBefore(\"csharp\", \"punctuation\", {\n            \"named-parameter\": {\n                pattern: re(/([(,]\\s*)<<0>>(?=\\s*:)/.source, [name]),\n                lookbehind: true,\n                alias: \"punctuation\",\n            },\n        });\n\n        Prism.languages.insertBefore(\"csharp\", \"class-name\", {\n            namespace: {\n                // namespace Foo.Bar {}\n                // using Foo.Bar;\n                pattern: re(/(\\b(?:namespace|using)\\s+)<<0>>(?:\\s*\\.\\s*<<0>>)*(?=\\s*[;{])/.source, [name]),\n                lookbehind: true,\n                inside: {\n                    punctuation: /\\./,\n                },\n            },\n            \"type-expression\": {\n                // default(Foo), typeof(Foo<Bar>), sizeof(int)\n                pattern: re(/(\\b(?:default|typeof|sizeof)\\s*\\(\\s*(?!\\s))(?:[^()\\s]|\\s(?!\\s)|<<0>>)*(?=\\s*\\))/.source, [\n                    nestedRound,\n                ]),\n                lookbehind: true,\n                alias: \"class-name\",\n                inside: typeInside,\n            },\n            \"return-type\": {\n                // Foo<Bar> ForBar(); Foo IFoo.Bar() => 0\n                // int this[int index] => 0; T IReadOnlyList<T>.this[int index] => this[index];\n                // int Foo => 0; int Foo { get; set } = 0;\n                pattern: re(/<<0>>(?=\\s+(?:<<1>>\\s*(?:=>|[({]|\\.\\s*this\\s*\\[)|this\\s*\\[))/.source, [\n                    typeExpression,\n                    identifier,\n                ]),\n                inside: typeInside,\n                alias: \"class-name\",\n            },\n            \"constructor-invocation\": {\n                // new List<Foo<Bar[]>> { }\n                pattern: re(/(\\bnew\\s+)<<0>>(?=\\s*[[({])/.source, [typeExpression]),\n                lookbehind: true,\n                inside: typeInside,\n                alias: \"class-name\",\n            },\n            /*'explicit-implementation': {\n                // int IFoo<Foo>.Bar => 0; void IFoo<Foo<Foo>>.Foo<T>();\n                pattern: replace(/\\b<<0>>(?=\\.<<1>>)/, className, methodOrPropertyDeclaration),\n                inside: classNameInside,\n                alias: 'class-name'\n            },*/\n            \"generic-method\": {\n                // foo<Bar>()\n                pattern: re(/<<0>>\\s*<<1>>(?=\\s*\\()/.source, [name, generic]),\n                inside: {\n                    function: re(/^<<0>>/.source, [name]),\n                    generic: {\n                        pattern: RegExp(generic),\n                        alias: \"class-name\",\n                        inside: typeInside,\n                    },\n                },\n            },\n            \"type-list\": {\n                // The list of types inherited or of generic constraints\n                // class Foo<F> : Bar, IList<FooBar>\n                // where F : Bar, IList<int>\n                pattern: re(\n                    /\\b((?:<<0>>\\s+<<1>>|record\\s+<<1>>\\s*<<5>>|where\\s+<<2>>)\\s*:\\s*)(?:<<3>>|<<4>>|<<1>>\\s*<<5>>|<<6>>)(?:\\s*,\\s*(?:<<3>>|<<4>>|<<6>>))*(?=\\s*(?:where|[{;]|=>|$))/\n                        .source,\n                    [\n                        typeDeclarationKeywords,\n                        genericName,\n                        name,\n                        typeExpression,\n                        keywords.source,\n                        nestedRound,\n                        /\\bnew\\s*\\(\\s*\\)/.source,\n                    ]\n                ),\n                lookbehind: true,\n                inside: {\n                    \"record-arguments\": {\n                        pattern: re(/(^(?!new\\s*\\()<<0>>\\s*)<<1>>/.source, [genericName, nestedRound]),\n                        lookbehind: true,\n                        greedy: true,\n                        inside: Prism.languages.csharp,\n                    },\n                    keyword: keywords,\n                    \"class-name\": {\n                        pattern: RegExp(typeExpression),\n                        greedy: true,\n                        inside: typeInside,\n                    },\n                    punctuation: /[,()]/,\n                },\n            },\n            preprocessor: {\n                pattern: /(^[\\t ]*)#.*/m,\n                lookbehind: true,\n                alias: \"property\",\n                inside: {\n                    // highlight preprocessor directives as keywords\n                    directive: {\n                        pattern:\n                            /(#)\\b(?:define|elif|else|endif|endregion|error|if|line|nullable|pragma|region|undef|warning)\\b/,\n                        lookbehind: true,\n                        alias: \"keyword\",\n                    },\n                },\n            },\n        });\n\n        // attributes\n        var regularStringOrCharacter = regularString + \"|\" + character;\n        var regularStringCharacterOrComment = replace(\n            /\\/(?![*/])|\\/\\/[^\\r\\n]*[\\r\\n]|\\/\\*(?:[^*]|\\*(?!\\/))*\\*\\/|<<0>>/.source,\n            [regularStringOrCharacter]\n        );\n        var roundExpression = nested(\n            replace(/[^\"'/()]|<<0>>|\\(<<self>>*\\)/.source, [regularStringCharacterOrComment]),\n            2\n        );\n\n        // https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/concepts/attributes/#attribute-targets\n        var attrTarget = /\\b(?:assembly|event|field|method|module|param|property|return|type)\\b/.source;\n        var attr = replace(/<<0>>(?:\\s*\\(<<1>>*\\))?/.source, [identifier, roundExpression]);\n\n        Prism.languages.insertBefore(\"csharp\", \"class-name\", {\n            attribute: {\n                // Attributes\n                // [Foo], [Foo(1), Bar(2, Prop = \"foo\")], [return: Foo(1), Bar(2)], [assembly: Foo(Bar)]\n                pattern: re(/((?:^|[^\\s\\w>)?])\\s*\\[\\s*)(?:<<0>>\\s*:\\s*)?<<1>>(?:\\s*,\\s*<<1>>)*(?=\\s*\\])/.source, [\n                    attrTarget,\n                    attr,\n                ]),\n                lookbehind: true,\n                greedy: true,\n                inside: {\n                    target: {\n                        pattern: re(/^<<0>>(?=\\s*:)/.source, [attrTarget]),\n                        alias: \"keyword\",\n                    },\n                    \"attribute-arguments\": {\n                        pattern: re(/\\(<<0>>*\\)/.source, [roundExpression]),\n                        inside: Prism.languages.csharp,\n                    },\n                    \"class-name\": {\n                        pattern: RegExp(identifier),\n                        inside: {\n                            punctuation: /\\./,\n                        },\n                    },\n                    punctuation: /[:,]/,\n                },\n            },\n        });\n\n        // string interpolation\n        var formatString = /:[^}\\r\\n]+/.source;\n        // multi line\n        var mInterpolationRound = nested(\n            replace(/[^\"'/()]|<<0>>|\\(<<self>>*\\)/.source, [regularStringCharacterOrComment]),\n            2\n        );\n        var mInterpolation = replace(/\\{(?!\\{)(?:(?![}:])<<0>>)*<<1>>?\\}/.source, [mInterpolationRound, formatString]);\n        // single line\n        var sInterpolationRound = nested(\n            replace(/[^\"'/()]|\\/(?!\\*)|\\/\\*(?:[^*]|\\*(?!\\/))*\\*\\/|<<0>>|\\(<<self>>*\\)/.source, [\n                regularStringOrCharacter,\n            ]),\n            2\n        );\n        var sInterpolation = replace(/\\{(?!\\{)(?:(?![}:])<<0>>)*<<1>>?\\}/.source, [sInterpolationRound, formatString]);\n\n        function createInterpolationInside(interpolation, interpolationRound) {\n            return {\n                interpolation: {\n                    pattern: re(/((?:^|[^{])(?:\\{\\{)*)<<0>>/.source, [interpolation]),\n                    lookbehind: true,\n                    inside: {\n                        \"format-string\": {\n                            pattern: re(/(^\\{(?:(?![}:])<<0>>)*)<<1>>(?=\\}$)/.source, [\n                                interpolationRound,\n                                formatString,\n                            ]),\n                            lookbehind: true,\n                            inside: {\n                                punctuation: /^:/,\n                            },\n                        },\n                        punctuation: /^\\{|\\}$/,\n                        expression: {\n                            pattern: /[\\s\\S]+/,\n                            alias: \"language-csharp\",\n                            inside: Prism.languages.csharp,\n                        },\n                    },\n                },\n                string: /[\\s\\S]+/,\n            };\n        }\n\n        Prism.languages.insertBefore(\"csharp\", \"string\", {\n            \"interpolation-string\": [\n                {\n                    pattern: re(/(^|[^\\\\])(?:\\$@|@\\$)\"(?:\"\"|\\\\[\\s\\S]|\\{\\{|<<0>>|[^\\\\{\"])*\"/.source, [mInterpolation]),\n                    lookbehind: true,\n                    greedy: true,\n                    inside: createInterpolationInside(mInterpolation, mInterpolationRound),\n                },\n                {\n                    pattern: re(/(^|[^@\\\\])\\$\"(?:\\\\.|\\{\\{|<<0>>|[^\\\\\"{])*\"/.source, [sInterpolation]),\n                    lookbehind: true,\n                    greedy: true,\n                    inside: createInterpolationInside(sInterpolation, sInterpolationRound),\n                },\n            ],\n        });\n    })(Prism);\n\n    Prism.languages.dotnet = Prism.languages.cs = Prism.languages.csharp;\n};\n","export const registerLanguage = (Prism) => {\n    // Copied from https://raw.githubusercontent.com/PrismJS/prism/master/components/prism-scala.js\n    Prism.languages.scala = Prism.languages.extend(\"java\", {\n        \"triple-quoted-string\": {\n            pattern: /\"\"\"[\\s\\S]*?\"\"\"/,\n            greedy: true,\n            alias: \"string\",\n        },\n        string: {\n            pattern: /(\"|')(?:\\\\.|(?!\\1)[^\\\\\\r\\n])*\\1/,\n            greedy: true,\n        },\n        keyword:\n            /<-|=>|\\b(?:abstract|case|catch|class|def|do|else|extends|final|finally|for|forSome|if|implicit|import|lazy|match|new|null|object|override|package|private|protected|return|sealed|self|super|this|throw|trait|try|type|val|var|while|with|yield)\\b/,\n        number: /\\b0x(?:[\\da-f]*\\.)?[\\da-f]+|(?:\\b\\d+(?:\\.\\d*)?|\\B\\.\\d+)(?:e\\d+)?[dfl]?/i,\n        builtin: /\\b(?:String|Int|Long|Short|Byte|Boolean|Double|Float|Char|Any|AnyRef|AnyVal|Unit|Nothing)\\b/,\n        symbol: /'[^\\d\\s\\\\]\\w*/,\n    });\n    delete Prism.languages.scala[\"class-name\"];\n    delete Prism.languages.scala[\"function\"];\n};\n","export const registerLanguage = (Prism) => {\n    // Copied from https://raw.githubusercontent.com/PrismJS/prism/master/components/prism-ruby.js\n    (function (Prism) {\n        Prism.languages.ruby = Prism.languages.extend(\"clike\", {\n            comment: [\n                /#.*/,\n                {\n                    pattern: /^=begin\\s[\\s\\S]*?^=end/m,\n                    greedy: true,\n                },\n            ],\n            \"class-name\": {\n                pattern: /(\\b(?:class)\\s+|\\bcatch\\s+\\()[\\w.\\\\]+/i,\n                lookbehind: true,\n                inside: {\n                    punctuation: /[.\\\\]/,\n                },\n            },\n            keyword:\n                /\\b(?:alias|and|BEGIN|begin|break|case|class|def|define_method|defined|do|each|else|elsif|END|end|ensure|extend|for|if|in|include|module|new|next|nil|not|or|prepend|protected|private|public|raise|redo|require|rescue|retry|return|self|super|then|throw|undef|unless|until|when|while|yield)\\b/,\n        });\n\n        var interpolation = {\n            pattern: /#\\{[^}]+\\}/,\n            inside: {\n                delimiter: {\n                    pattern: /^#\\{|\\}$/,\n                    alias: \"tag\",\n                },\n                rest: Prism.languages.ruby,\n            },\n        };\n\n        delete Prism.languages.ruby.function;\n\n        Prism.languages.insertBefore(\"ruby\", \"keyword\", {\n            regex: [\n                {\n                    pattern: RegExp(\n                        /%r/.source +\n                            \"(?:\" +\n                            [\n                                /([^a-zA-Z0-9\\s{(\\[<])(?:(?!\\1)[^\\\\]|\\\\[\\s\\S])*\\1/.source,\n                                /\\((?:[^()\\\\]|\\\\[\\s\\S])*\\)/.source,\n                                // Here we need to specifically allow interpolation\n                                /\\{(?:[^#{}\\\\]|#(?:\\{[^}]+\\})?|\\\\[\\s\\S])*\\}/.source,\n                                /\\[(?:[^\\[\\]\\\\]|\\\\[\\s\\S])*\\]/.source,\n                                /<(?:[^<>\\\\]|\\\\[\\s\\S])*>/.source,\n                            ].join(\"|\") +\n                            \")\" +\n                            /[egimnosux]{0,6}/.source\n                    ),\n                    greedy: true,\n                    inside: {\n                        interpolation: interpolation,\n                    },\n                },\n                {\n                    pattern:\n                        /(^|[^/])\\/(?!\\/)(?:\\[[^\\r\\n\\]]+\\]|\\\\.|[^[/\\\\\\r\\n])+\\/[egimnosux]{0,6}(?=\\s*(?:$|[\\r\\n,.;})#]))/,\n                    lookbehind: true,\n                    greedy: true,\n                    inside: {\n                        interpolation: interpolation,\n                    },\n                },\n            ],\n            variable: /[@$]+[a-zA-Z_]\\w*(?:[?!]|\\b)/,\n            symbol: {\n                pattern: /(^|[^:]):[a-zA-Z_]\\w*(?:[?!]|\\b)/,\n                lookbehind: true,\n            },\n            \"method-definition\": {\n                pattern: /(\\bdef\\s+)[\\w.]+/,\n                lookbehind: true,\n                inside: {\n                    function: /\\w+$/,\n                    rest: Prism.languages.ruby,\n                },\n            },\n        });\n\n        Prism.languages.insertBefore(\"ruby\", \"number\", {\n            builtin:\n                /\\b(?:Array|Bignum|Binding|Class|Continuation|Dir|Exception|FalseClass|File|Stat|Fixnum|Float|Hash|Integer|IO|MatchData|Method|Module|NilClass|Numeric|Object|Proc|Range|Regexp|String|Struct|TMS|Symbol|ThreadGroup|Thread|Time|TrueClass)\\b/,\n            constant: /\\b[A-Z]\\w*(?:[?!]|\\b)/,\n        });\n\n        Prism.languages.ruby.string = [\n            {\n                pattern: RegExp(\n                    /%[qQiIwWxs]?/.source +\n                        \"(?:\" +\n                        [\n                            /([^a-zA-Z0-9\\s{(\\[<])(?:(?!\\1)[^\\\\]|\\\\[\\s\\S])*\\1/.source,\n                            /\\((?:[^()\\\\]|\\\\[\\s\\S])*\\)/.source,\n                            // Here we need to specifically allow interpolation\n                            /\\{(?:[^#{}\\\\]|#(?:\\{[^}]+\\})?|\\\\[\\s\\S])*\\}/.source,\n                            /\\[(?:[^\\[\\]\\\\]|\\\\[\\s\\S])*\\]/.source,\n                            /<(?:[^<>\\\\]|\\\\[\\s\\S])*>/.source,\n                        ].join(\"|\") +\n                        \")\"\n                ),\n                greedy: true,\n                inside: {\n                    interpolation: interpolation,\n                },\n            },\n            {\n                pattern: /(\"|')(?:#\\{[^}]+\\}|#(?!\\{)|\\\\(?:\\r\\n|[\\s\\S])|(?!\\1)[^\\\\#\\r\\n])*\\1/,\n                greedy: true,\n                inside: {\n                    interpolation: interpolation,\n                },\n            },\n            {\n                pattern: /<<[-~]?([a-z_]\\w*)[\\r\\n](?:.*[\\r\\n])*?[\\t ]*\\1/i,\n                alias: \"heredoc-string\",\n                greedy: true,\n                inside: {\n                    delimiter: {\n                        pattern: /^<<[-~]?[a-z_]\\w*|[a-z_]\\w*$/i,\n                        alias: \"symbol\",\n                        inside: {\n                            punctuation: /^<<[-~]?/,\n                        },\n                    },\n                    interpolation: interpolation,\n                },\n            },\n            {\n                pattern: /<<[-~]?'([a-z_]\\w*)'[\\r\\n](?:.*[\\r\\n])*?[\\t ]*\\1/i,\n                alias: \"heredoc-string\",\n                greedy: true,\n                inside: {\n                    delimiter: {\n                        pattern: /^<<[-~]?'[a-z_]\\w*'|[a-z_]\\w*$/i,\n                        alias: \"symbol\",\n                        inside: {\n                            punctuation: /^<<[-~]?'|'$/,\n                        },\n                    },\n                },\n            },\n        ];\n\n        Prism.languages.rb = Prism.languages.ruby;\n    })(Prism);\n};\n","export const registerLanguage = (Prism) => {\n    // Copied from https://raw.githubusercontent.com/PrismJS/prism/master/components/prism-http.js\n    (function (Prism) {\n        Prism.languages.http = {\n            \"request-line\": {\n                pattern:\n                    /^(?:GET|HEAD|POST|PUT|DELETE|CONNECT|OPTIONS|TRACE|PATCH|PRI|SEARCH)\\s(?:https?:\\/\\/|\\/)\\S*\\sHTTP\\/[0-9.]+/m,\n                inside: {\n                    // HTTP Method\n                    method: {\n                        pattern: /^[A-Z]+\\b/,\n                        alias: \"property\",\n                    },\n                    // Request Target e.g. http://example.com, /path/to/file\n                    \"request-target\": {\n                        pattern: /^(\\s)(?:https?:\\/\\/|\\/)\\S*(?=\\s)/,\n                        lookbehind: true,\n                        alias: \"url\",\n                        inside: Prism.languages.uri,\n                    },\n                    // HTTP Version\n                    \"http-version\": {\n                        pattern: /^(\\s)HTTP\\/[0-9.]+/,\n                        lookbehind: true,\n                        alias: \"property\",\n                    },\n                },\n            },\n            \"response-status\": {\n                pattern: /^HTTP\\/[0-9.]+ \\d+ .+/m,\n                inside: {\n                    // HTTP Version\n                    \"http-version\": {\n                        pattern: /^HTTP\\/[0-9.]+/,\n                        alias: \"property\",\n                    },\n                    // Status Code\n                    \"status-code\": {\n                        pattern: /^(\\s)\\d+(?=\\s)/,\n                        lookbehind: true,\n                        alias: \"number\",\n                    },\n                    // Reason Phrase\n                    \"reason-phrase\": {\n                        pattern: /^(\\s).+/,\n                        lookbehind: true,\n                        alias: \"string\",\n                    },\n                },\n            },\n            // HTTP header name\n            \"header-name\": {\n                pattern: /^[\\w-]+:(?=.)/m,\n                alias: \"keyword\",\n            },\n        };\n\n        // Create a mapping of Content-Type headers to language definitions\n        var langs = Prism.languages;\n        var httpLanguages = {\n            \"application/javascript\": langs.javascript,\n            \"application/json\": langs.json || langs.javascript,\n            \"application/xml\": langs.xml,\n            \"text/xml\": langs.xml,\n            \"text/html\": langs.html,\n            \"text/css\": langs.css,\n        };\n\n        // Declare which types can also be suffixes\n        var suffixTypes = {\n            \"application/json\": true,\n            \"application/xml\": true,\n        };\n\n        /**\n         * Returns a pattern for the given content type which matches it and any type which has it as a suffix.\n         *\n         * @param {string} contentType\n         * @returns {string}\n         */\n        function getSuffixPattern(contentType) {\n            var suffix = contentType.replace(/^[a-z]+\\//, \"\");\n            var suffixPattern = \"\\\\w+/(?:[\\\\w.-]+\\\\+)+\" + suffix + \"(?![+\\\\w.-])\";\n            return \"(?:\" + contentType + \"|\" + suffixPattern + \")\";\n        }\n\n        // Insert each content type parser that has its associated language\n        // currently loaded.\n        var options;\n        for (var contentType in httpLanguages) {\n            if (httpLanguages[contentType]) {\n                options = options || {};\n\n                var pattern = suffixTypes[contentType] ? getSuffixPattern(contentType) : contentType;\n                options[contentType.replace(/\\//g, \"-\")] = {\n                    pattern: RegExp(\n                        \"(content-type:\\\\s*\" + pattern + \"(?:(?:\\\\r\\\\n?|\\\\n).+)*)(?:\\\\r?\\\\n|\\\\r){2}[\\\\s\\\\S]*\",\n                        \"i\"\n                    ),\n                    lookbehind: true,\n                    inside: httpLanguages[contentType],\n                };\n            }\n        }\n        if (options) {\n            Prism.languages.insertBefore(\"http\", \"header-name\", options);\n        }\n    })(Prism);\n};\n"],"names":["uniqueId","_","Token","Prism","util","encode","tokens","type","content","alias","map","replace","o","Object","prototype","toString","call","match","objId","obj","defineProperty","value","clone","visited","key","hasOwnProperty","forEach","v","i","languages","extend","id","redef","lang","insertBefore","inside","before","insert","root","grammar","arguments","length","newToken","ret","token","DFS","callback","plugins","highlight","text","language","env","code","hooks","run","tokenize","stringify","matchGrammar","strarr","index","startPos","oneshot","target","patterns","j","pattern","lookbehind","greedy","lookbehindLength","global","flags","RegExp","source","pos","str","lastIndex","exec","from","to","k","p","len","delNum","slice","after","args","push","wrapped","Array","splice","apply","add","name","rest","matchedStr","parent","element","join","tag","classes","attributes","aliases","keys","markup","tagName","includedCdataInside","def","html","mathml","svg","xml","ssml","atom","rss","envVars","commandAfterHeredoc","insideString","bash","variable","toBeCopied","shell","clike","c","keyword","cpp","string","css","addInlined","selectorInside","selector","unit","number","javascript","regex","js","jsx","stringifyToken","walkTokens","openedTags","notTagNorBrace","pop","openedBraces","plainText","withId","unshift","maybeClassNameTokens","comment","interpolation","coffeescript","coffee","diff","PREFIXES","prefix","test","git","go","graphql","markdown","getPlaceholder","toUpperCase","defineProperties","buildPlaceholders","placeholderPattern","replaceFilter","tokenStack","placeholder","indexOf","tokenizePlaceholders","t","s","substring","middle","replacement","concat","handlebars","punctuation","json","webmanifest","less","makefile","inner","createInline","tableCell","tableRow","tableLine","yaml","l","codeLang","codeBlock","toLowerCase","cls","autoloader","Date","valueOf","Math","floor","random","loadLanguages","ele","document","getElementById","innerHTML","textContent","md","objectivec","objc","ocaml","python","py","reason","function","sass","atrule","operator","important","property","scss","sql","stylus","func","typescript","typeInside","ts","tsx","wasm","anchorOrAlias","properties","plainKey","createValuePattern","yml","_defineProperty","enumerable","configurable","writable","_extends","assign","this","newlineRe","normalizeEmptyLines","line","types","empty","appendTypes","typesSize","themeToDict","theme","plain","base","create","themeDict","styles","reduce","acc","themeEntry","style","includes","accStyle","backgroundColor","objectWithoutProperties","exclude","Component","Highlight","this$1","props","undefined","prevTheme","prevLanguage","ref","className","output","getThemeDict","display","baseStyle","typeStyles","children","getStyleForToken","__proto__","constructor","render","typeArrStack","tokenArrStack","tokenArrIndexStack","tokenArrSizeStack","stackIndex","currentLine","splitByNewlines","split","newlineCount","i$1","normalizeTokens","getLineProps","getTokenProps","keywords","classNamePrefix","namespace","java","annotation","generics","registerJava","replacements","m","re","nested","depthLog2","keywordKinds","keywordsToPattern","words","trim","typeDeclarationKeywords","nonTypeKeywords","nonContextualKeywords","generic","nestedRound","genericName","identifier","array","typeExpressionWithoutTuple","tupleElement","tuple","typeExpression","character","regularString","verbatimString","csharp","range","preprocessor","directive","regularStringOrCharacter","regularStringCharacterOrComment","roundExpression","attrTarget","attr","attribute","formatString","mInterpolationRound","mInterpolation","sInterpolationRound","sInterpolation","createInterpolationInside","interpolationRound","expression","dotnet","cs","registerCSharp","scala","builtin","symbol","registerScala","ruby","delimiter","constant","rb","registerRuby","http","method","uri","options","langs","httpLanguages","suffixTypes","getSuffixPattern","contentType","suffix","registerHttp","CodeBlock","React","forwardRef","_a","Element","as","CodeStyled","PrismReactRenderer","JSON"],"mappings":"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"}